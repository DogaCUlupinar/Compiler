
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Tue Mar 11 10:35:30 PDT 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;
import java.util.HashMap;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Tue Mar 11 10:35:30 PDT 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\276\000\002\114\002\000\002\003\004\000\002\002" +
    "\004\000\002\004\003\000\002\004\002\000\002\005\003" +
    "\000\002\005\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\011\006\000\002\012\006\000\002\012" +
    "\010\000\002\013\007\000\002\013\011\000\002\036\003" +
    "\000\002\036\002\000\002\014\006\000\002\115\002\000" +
    "\002\014\011\000\002\101\003\000\002\101\004\000\002" +
    "\113\005\000\002\113\003\000\002\116\002\000\002\117" +
    "\002\000\002\007\017\000\002\120\002\000\002\121\002" +
    "\000\002\010\015\000\002\075\004\000\002\075\011\000" +
    "\002\076\003\000\002\076\011\000\002\074\003\000\002" +
    "\074\003\000\002\073\003\000\002\073\003\000\002\073" +
    "\003\000\002\073\003\000\002\122\002\000\002\073\007" +
    "\000\002\070\003\000\002\070\005\000\002\070\002\000" +
    "\002\071\003\000\002\071\002\000\002\106\003\000\002" +
    "\106\004\000\002\035\003\000\002\077\004\000\002\077" +
    "\003\000\002\123\002\000\002\124\002\000\002\020\007" +
    "\000\002\015\003\000\002\015\002\000\002\016\003\000" +
    "\002\016\004\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\004\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\105\003\000\002\105\002\000\002\107\003\000\002\107" +
    "\005\000\002\046\005\000\002\040\003\000\002\040\002" +
    "\000\002\102\003\000\002\102\005\000\002\103\003\000" +
    "\002\103\005\000\002\112\005\000\002\112\007\000\002" +
    "\104\006\000\002\104\010\000\002\051\004\000\002\051" +
    "\006\000\002\051\002\000\002\033\003\000\002\033\005" +
    "\000\002\125\002\000\002\126\002\000\002\021\012\000" +
    "\002\127\002\000\002\037\007\000\002\037\002\000\002" +
    "\130\002\000\002\131\002\000\002\132\002\000\002\022" +
    "\012\000\002\023\004\000\002\024\004\000\002\025\007" +
    "\000\002\026\004\000\002\026\005\000\002\027\005\000" +
    "\002\030\005\000\002\031\006\000\002\032\006\000\002" +
    "\100\003\000\002\100\005\000\002\052\003\000\002\052" +
    "\003\000\002\050\003\000\002\110\003\000\002\110\002" +
    "\000\002\111\003\000\002\111\005\000\002\034\003\000" +
    "\002\034\003\000\002\047\003\000\002\047\002\000\002" +
    "\053\005\000\002\053\003\000\002\133\002\000\002\054" +
    "\006\000\002\054\003\000\002\134\002\000\002\055\006" +
    "\000\002\055\003\000\002\056\005\000\002\056\003\000" +
    "\002\057\005\000\002\057\003\000\002\060\005\000\002" +
    "\060\003\000\002\061\005\000\002\061\003\000\002\062" +
    "\005\000\002\062\003\000\002\063\005\000\002\063\003" +
    "\000\002\064\005\000\002\064\003\000\002\044\003\000" +
    "\002\044\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\041\003\000\002\041" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\043\003\000\002\043\003\000\002\065\004\000" +
    "\002\065\004\000\002\065\004\000\002\065\004\000\002" +
    "\065\006\000\002\065\006\000\002\065\006\000\002\065" +
    "\004\000\002\065\003\000\002\066\005\000\002\066\006" +
    "\000\002\066\005\000\002\066\004\000\002\066\006\000" +
    "\002\066\003\000\002\067\005\000\002\067\003\000\002" +
    "\067\003\000\002\067\003\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\004" +
    "\000\002\067\003\000\002\072\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014a\000\040\002\001\011\001\014\001\021\001\031" +
    "\001\033\001\034\001\035\001\041\001\072\001\073\001" +
    "\075\001\102\001\103\001\110\001\001\002\000\004\002" +
    "\u014c\001\002\000\040\002\ufffd\011\uffee\014\uffee\021\uffee" +
    "\031\007\033\uffee\034\uffee\035\010\041\uffee\072\014\073" +
    "\011\075\024\102\uffee\103\uffee\110\uffee\001\002\000\040" +
    "\002\ufff6\011\ufff6\014\ufff6\021\ufff6\031\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\041\ufff6\072\ufff6\073\ufff6\075\ufff6\102\ufff6" +
    "\103\ufff6\110\ufff6\001\002\000\022\011\035\014\033\033" +
    "\036\034\034\035\u0140\041\037\103\027\110\032\001\002" +
    "\000\004\016\346\001\002\000\004\110\327\001\002\000" +
    "\024\011\035\014\033\021\252\033\036\034\251\041\037" +
    "\102\250\103\027\110\032\001\002\000\040\002\ufff9\011" +
    "\ufff9\014\ufff9\021\ufff9\031\ufff9\033\ufff9\034\ufff9\035\ufff9" +
    "\041\ufff9\072\ufff9\073\ufff9\075\ufff9\102\ufff9\103\ufff9\110" +
    "\ufff9\001\002\000\024\011\uffef\014\uffef\021\uffef\033\uffef" +
    "\034\uffef\041\uffef\102\uffef\103\uffef\110\uffef\001\002\000" +
    "\040\002\ufffc\011\ufffc\014\ufffc\021\ufffc\031\ufffc\033\ufffc" +
    "\034\ufffc\035\ufffc\041\ufffc\072\ufffc\073\ufffc\075\ufffc\102" +
    "\ufffc\103\ufffc\110\ufffc\001\002\000\040\002\ufff7\011\ufff7" +
    "\014\ufff7\021\ufff7\031\ufff7\033\ufff7\034\ufff7\035\ufff7\041" +
    "\ufff7\072\ufff7\073\ufff7\075\ufff7\102\ufff7\103\ufff7\110\ufff7" +
    "\001\002\000\040\002\ufff5\011\ufff5\014\ufff5\021\ufff5\031" +
    "\ufff5\033\ufff5\034\ufff5\035\ufff5\041\ufff5\072\ufff5\073\ufff5" +
    "\075\ufff5\102\ufff5\103\ufff5\110\ufff5\001\002\000\040\002" +
    "\ufffe\011\uffee\014\uffee\021\uffee\031\007\033\uffee\034\uffee" +
    "\035\010\041\uffee\072\014\073\011\075\024\102\uffee\103" +
    "\uffee\110\uffee\001\002\000\040\002\ufffa\011\ufffa\014\ufffa" +
    "\021\ufffa\031\ufffa\033\ufffa\034\ufffa\035\ufffa\041\ufffa\072" +
    "\ufffa\073\ufffa\075\ufffa\102\ufffa\103\ufffa\110\ufffa\001\002" +
    "\000\004\002\000\001\002\000\040\002\ufff8\011\ufff8\014" +
    "\ufff8\021\ufff8\031\ufff8\033\ufff8\034\ufff8\035\ufff8\041\ufff8" +
    "\072\ufff8\073\ufff8\075\ufff8\102\ufff8\103\ufff8\110\ufff8\001" +
    "\002\000\020\011\035\014\033\033\036\034\034\041\037" +
    "\103\027\110\032\001\002\000\004\110\240\001\002\000" +
    "\020\004\uffdc\044\uffdc\045\uffdc\065\uffdc\071\uffdc\110\uffdc" +
    "\111\uffdc\001\002\000\004\045\uffd6\001\002\000\020\004" +
    "\uffdb\044\uffdb\045\uffdb\065\uffdb\071\uffdb\110\uffdb\111\uffdb" +
    "\001\002\000\016\004\uffd2\044\065\065\uffd2\071\061\110" +
    "\uffd2\111\uffd2\001\002\000\020\004\uff44\044\uff44\045\uff44" +
    "\065\uff44\071\uff44\110\uff44\111\uff44\001\002\000\020\004" +
    "\uffd7\044\uffd7\045\uffd7\065\uffd7\071\uffd7\110\uffd7\111\uffd7" +
    "\001\002\000\004\016\040\001\002\000\020\004\uffd8\044" +
    "\uffd8\045\uffd8\065\uffd8\071\uffd8\110\uffd8\111\uffd8\001\002" +
    "\000\020\004\uffd9\044\uffd9\045\uffd9\065\uffd9\071\uffd9\110" +
    "\uffd9\111\uffd9\001\002\000\020\004\uffda\044\uffda\045\uffda" +
    "\065\uffda\071\uffda\110\uffda\111\uffda\001\002\000\020\011" +
    "\035\014\033\033\036\041\037\101\043\103\027\110\032" +
    "\001\002\000\012\004\uffd0\045\uffd0\071\061\111\uffd0\001" +
    "\002\000\006\004\044\045\uffae\001\002\000\010\004\uffcb" +
    "\045\uffcb\111\uffcb\001\002\000\006\045\uffaf\111\uffaf\001" +
    "\002\000\004\045\046\001\002\000\022\011\035\014\033" +
    "\033\036\034\034\041\037\065\uffb3\103\027\110\032\001" +
    "\002\000\006\004\044\111\uffae\001\002\000\006\020\054" +
    "\065\uffb4\001\002\000\006\020\uffb2\065\uffb2\001\002\000" +
    "\004\065\053\001\002\000\012\004\uffdf\065\uffdf\110\uffdf" +
    "\111\uffdf\001\002\000\020\011\035\014\033\033\036\034" +
    "\034\041\037\103\027\110\032\001\002\000\006\020\uffb1" +
    "\065\uffb1\001\002\000\004\111\057\001\002\000\006\020" +
    "\uffb0\065\uffb0\001\002\000\010\004\uffcc\045\uffcc\111\uffcc" +
    "\001\002\000\016\004\uffcd\045\uffcd\065\uffcd\071\uffcd\110" +
    "\uffcd\111\uffcd\001\002\000\012\004\uffd1\045\uffd1\071\061" +
    "\111\uffd1\001\002\000\016\004\uffcf\045\uffcf\065\uffcf\071" +
    "\uffcf\110\uffcf\111\uffcf\001\002\000\016\004\uffce\045\uffce" +
    "\065\uffce\071\uffce\110\uffce\111\uffce\001\002\000\046\004" +
    "\120\017\130\032\113\045\122\050\114\051\123\054\110" +
    "\055\127\060\125\061\112\067\116\071\131\074\101\104" +
    "\107\105\126\106\111\107\073\111\117\001\002\000\012" +
    "\004\uffe0\065\uffe0\110\uffe0\111\uffe0\001\002\000\014\004" +
    "\uffd4\065\uffd4\071\061\110\uffd4\111\uffd4\001\002\000\060" +
    "\004\uff6d\005\uff6d\010\uff6d\013\uff6d\020\uff6d\027\uff6d\036" +
    "\uff6d\037\uff6d\043\uff6d\046\uff6d\047\uff6d\050\uff6d\052\205" +
    "\053\uff6d\056\uff6d\057\uff6d\060\uff6d\062\uff6d\063\uff6d\065" +
    "\uff6d\066\uff6d\070\207\071\206\001\002\000\062\004\uff6b" +
    "\005\uff6b\007\232\010\uff6b\013\uff6b\020\uff6b\027\uff6b\036" +
    "\uff6b\037\uff6b\043\uff6b\046\uff6b\047\uff6b\050\uff6b\052\uff6b" +
    "\053\uff6b\056\uff6b\057\uff6b\060\uff6b\062\uff6b\063\uff6b\065" +
    "\uff6b\066\uff6b\070\uff6b\071\uff6b\001\002\000\052\004\uff6f" +
    "\005\uff6f\010\uff6f\013\uff6f\020\uff6f\027\uff6f\036\uff6f\037" +
    "\uff6f\043\uff6f\046\uff6f\047\uff6f\050\202\053\uff6f\056\uff6f" +
    "\057\uff6f\060\201\062\uff6f\063\uff6f\065\uff6f\066\uff6f\001" +
    "\002\000\076\004\uff4a\005\uff4a\006\uff4a\007\uff4a\010\uff4a" +
    "\013\uff4a\020\uff4a\024\uff4a\027\uff4a\036\uff4a\037\uff4a\043" +
    "\uff4a\044\uff4a\045\uff4a\046\uff4a\047\uff4a\050\uff4a\051\uff4a" +
    "\052\uff4a\053\uff4a\056\uff4a\057\uff4a\060\uff4a\061\uff4a\062" +
    "\uff4a\063\uff4a\065\uff4a\066\uff4a\070\uff4a\071\uff4a\001\002" +
    "\000\046\004\uff71\005\uff71\010\uff71\013\uff71\020\uff71\027" +
    "\uff71\036\177\037\173\043\uff71\046\175\047\174\053\uff71" +
    "\056\uff71\057\uff71\062\uff71\063\uff71\065\uff71\066\uff71\001" +
    "\002\000\076\004\uff4f\005\uff4f\006\uff4f\007\uff4f\010\uff4f" +
    "\013\uff4f\020\uff4f\024\uff4f\027\uff4f\036\uff4f\037\uff4f\043" +
    "\uff4f\044\uff4f\045\uff4f\046\uff4f\047\uff4f\050\uff4f\051\uff4f" +
    "\052\uff4f\053\uff4f\056\uff4f\057\uff4f\060\uff4f\061\uff4f\062" +
    "\uff4f\063\uff4f\065\uff4f\066\uff4f\070\uff4f\071\uff4f\001\002" +
    "\000\036\004\uff73\005\uff73\010\uff73\013\uff73\020\uff73\027" +
    "\171\043\uff73\053\170\056\uff73\057\uff73\062\uff73\063\uff73" +
    "\065\uff73\066\uff73\001\002\000\076\004\uff55\005\uff55\006" +
    "\217\007\uff55\010\uff55\013\uff55\020\uff55\024\216\027\uff55" +
    "\036\uff55\037\uff55\043\uff55\044\213\045\214\046\uff55\047" +
    "\uff55\050\uff55\051\123\052\uff55\053\uff55\056\uff55\057\uff55" +
    "\060\uff55\061\112\062\uff55\063\uff55\065\uff55\066\uff55\070" +
    "\uff55\071\uff55\001\002\000\032\004\165\005\uff75\010\uff75" +
    "\013\uff75\020\uff75\043\uff75\056\uff75\057\uff75\062\uff75\063" +
    "\uff75\065\uff75\066\uff75\001\002\000\076\004\uff49\005\uff49" +
    "\006\uff49\007\uff49\010\uff49\013\uff49\020\uff49\024\uff49\027" +
    "\uff49\036\uff49\037\uff49\043\uff49\044\uff49\045\uff49\046\uff49" +
    "\047\uff49\050\uff49\051\uff49\052\uff49\053\uff49\056\uff49\057" +
    "\uff49\060\uff49\061\uff49\062\uff49\063\uff49\065\uff49\066\uff49" +
    "\070\uff49\071\uff49\001\002\000\030\005\uff77\010\uff77\013" +
    "\163\020\uff77\043\uff77\056\uff77\057\uff77\062\uff77\063\uff77" +
    "\065\uff77\066\uff77\001\002\000\004\063\212\001\002\000" +
    "\026\005\uff79\010\161\020\uff79\043\uff79\056\uff79\057\uff79" +
    "\062\uff79\063\uff79\065\uff79\066\uff79\001\002\000\024\005" +
    "\156\020\uff7c\043\uff7c\056\uff7c\057\uff7c\062\uff7c\063\uff7c" +
    "\065\uff7c\066\uff7c\001\002\000\022\020\uff7f\043\uff7f\056" +
    "\152\057\uff7f\062\uff7f\063\uff7f\065\uff7f\066\uff7f\001\002" +
    "\000\076\004\uff4b\005\uff4b\006\uff4b\007\uff4b\010\uff4b\013" +
    "\uff4b\020\uff4b\024\uff4b\027\uff4b\036\uff4b\037\uff4b\043\uff4b" +
    "\044\uff4b\045\uff4b\046\uff4b\047\uff4b\050\uff4b\051\uff4b\052" +
    "\uff4b\053\uff4b\056\uff4b\057\uff4b\060\uff4b\061\uff4b\062\uff4b" +
    "\063\uff4b\065\uff4b\066\uff4b\070\uff4b\071\uff4b\001\002\000" +
    "\046\004\120\017\130\032\113\045\122\050\114\051\123" +
    "\054\110\055\127\060\125\061\112\067\116\071\131\074" +
    "\101\104\107\105\126\106\111\107\073\111\117\001\002" +
    "\000\076\004\uff4d\005\uff4d\006\uff4d\007\uff4d\010\uff4d\013" +
    "\uff4d\020\uff4d\024\uff4d\027\uff4d\036\uff4d\037\uff4d\043\uff4d" +
    "\044\uff4d\045\uff4d\046\uff4d\047\uff4d\050\uff4d\051\uff4d\052" +
    "\uff4d\053\uff4d\056\uff4d\057\uff4d\060\uff4d\061\uff4d\062\uff4d" +
    "\063\uff4d\065\uff4d\066\uff4d\070\uff4d\071\uff4d\001\002\000" +
    "\124\004\uff5f\005\uff5f\006\uff5f\007\uff5f\010\uff5f\013\uff5f" +
    "\017\uff5f\020\uff5f\024\uff5f\027\uff5f\032\uff5f\036\uff5f\037" +
    "\uff5f\043\uff5f\044\uff5f\045\uff5f\046\uff5f\047\uff5f\050\uff5f" +
    "\051\uff5f\052\uff5f\053\uff5f\054\uff5f\055\uff5f\056\uff5f\057" +
    "\uff5f\060\uff5f\061\uff5f\062\uff5f\063\uff5f\065\uff5f\066\uff5f" +
    "\067\uff5f\070\uff5f\071\uff5f\074\uff5f\104\uff5f\105\uff5f\106" +
    "\uff5f\107\uff5f\111\uff5f\001\002\000\076\004\uff48\005\uff48" +
    "\006\uff48\007\uff48\010\uff48\013\uff48\020\uff48\024\uff48\027" +
    "\uff48\036\uff48\037\uff48\043\uff48\044\uff48\045\uff48\046\uff48" +
    "\047\uff48\050\uff48\051\uff48\052\uff48\053\uff48\056\uff48\057" +
    "\uff48\060\uff48\061\uff48\062\uff48\063\uff48\065\uff48\066\uff48" +
    "\070\uff48\071\uff48\001\002\000\046\004\uff84\017\uff84\032" +
    "\uff84\045\uff84\050\uff84\051\uff84\054\uff84\055\uff84\060\uff84" +
    "\061\uff84\067\uff84\071\uff84\074\uff84\104\uff84\105\uff84\106" +
    "\uff84\107\uff84\111\uff84\001\002\000\010\020\uff89\063\uff89" +
    "\066\uff89\001\002\000\004\045\144\001\002\000\076\004" +
    "\uff45\005\uff45\006\uff45\007\uff45\010\uff45\013\uff45\020\uff45" +
    "\024\uff45\027\uff45\036\uff45\037\uff45\043\uff45\044\uff45\045" +
    "\uff45\046\uff45\047\uff45\050\uff45\051\uff45\052\uff45\053\uff45" +
    "\056\uff45\057\uff45\060\uff45\061\uff45\062\uff45\063\uff45\065" +
    "\uff45\066\uff45\070\uff45\071\uff45\001\002\000\046\004\120" +
    "\017\130\032\113\045\122\050\114\051\123\054\110\055" +
    "\127\060\125\061\112\067\116\071\131\074\101\104\107" +
    "\105\126\106\111\107\073\111\117\001\002\000\046\004" +
    "\120\017\130\032\113\045\122\050\114\051\123\054\110" +
    "\055\127\060\125\061\112\067\116\071\131\074\101\104" +
    "\107\105\126\106\111\107\073\111\117\001\002\000\064" +
    "\004\120\011\035\014\033\017\130\032\113\033\036\034" +
    "\034\041\037\045\122\050\114\051\123\054\110\055\127" +
    "\060\125\061\112\067\116\071\131\074\101\103\027\104" +
    "\107\105\126\106\111\107\073\110\032\111\117\001\002" +
    "\000\124\004\uff5e\005\uff5e\006\uff5e\007\uff5e\010\uff5e\013" +
    "\uff5e\017\uff5e\020\uff5e\024\uff5e\027\uff5e\032\uff5e\036\uff5e" +
    "\037\uff5e\043\uff5e\044\uff5e\045\uff5e\046\uff5e\047\uff5e\050" +
    "\uff5e\051\uff5e\052\uff5e\053\uff5e\054\uff5e\055\uff5e\056\uff5e" +
    "\057\uff5e\060\uff5e\061\uff5e\062\uff5e\063\uff5e\065\uff5e\066" +
    "\uff5e\067\uff5e\070\uff5e\071\uff5e\074\uff5e\104\uff5e\105\uff5e" +
    "\106\uff5e\107\uff5e\111\uff5e\001\002\000\046\004\120\017" +
    "\130\032\113\045\122\050\114\051\123\054\110\055\127" +
    "\060\125\061\112\067\116\071\131\074\101\104\107\105" +
    "\126\106\111\107\073\111\117\001\002\000\046\004\uff83" +
    "\017\uff83\032\uff83\045\uff83\050\uff83\051\uff83\054\uff83\055" +
    "\uff83\060\uff83\061\uff83\067\uff83\071\uff83\074\uff83\104\uff83" +
    "\105\uff83\106\uff83\107\uff83\111\uff83\001\002\000\076\004" +
    "\uff4c\005\uff4c\006\uff4c\007\uff4c\010\uff4c\013\uff4c\020\uff4c" +
    "\024\uff4c\027\uff4c\036\uff4c\037\uff4c\043\uff4c\044\uff4c\045" +
    "\uff4c\046\uff4c\047\uff4c\050\uff4c\051\uff4c\052\uff4c\053\uff4c" +
    "\056\uff4c\057\uff4c\060\uff4c\061\uff4c\062\uff4c\063\uff4c\065" +
    "\uff4c\066\uff4c\070\uff4c\071\uff4c\001\002\000\076\004\uff47" +
    "\005\uff47\006\uff47\007\uff47\010\uff47\013\uff47\020\uff47\024" +
    "\uff47\027\uff47\036\uff47\037\uff47\043\uff47\044\uff47\045\uff47" +
    "\046\uff47\047\uff47\050\uff47\051\uff47\052\uff47\053\uff47\056" +
    "\uff47\057\uff47\060\uff47\061\uff47\062\uff47\063\uff47\065\uff47" +
    "\066\uff47\070\uff47\071\uff47\001\002\000\004\111\133\001" +
    "\002\000\046\004\120\017\130\032\113\045\122\050\114" +
    "\051\123\054\110\055\127\060\125\061\112\067\116\071" +
    "\131\074\101\104\107\105\126\106\111\107\073\111\117" +
    "\001\002\000\062\004\uff5d\005\uff5d\007\uff5d\010\uff5d\013" +
    "\uff5d\020\uff5d\027\uff5d\036\uff5d\037\uff5d\043\uff5d\046\uff5d" +
    "\047\uff5d\050\uff5d\052\uff5d\053\uff5d\056\uff5d\057\uff5d\060" +
    "\uff5d\062\uff5d\063\uff5d\065\uff5d\066\uff5d\070\uff5d\071\uff5d" +
    "\001\002\000\076\004\uff46\005\uff46\006\uff46\007\uff46\010" +
    "\uff46\013\uff46\020\uff46\024\uff46\027\uff46\036\uff46\037\uff46" +
    "\043\uff46\044\uff46\045\uff46\046\uff46\047\uff46\050\uff46\051" +
    "\uff46\052\uff46\053\uff46\056\uff46\057\uff46\060\uff46\061\uff46" +
    "\062\uff46\063\uff46\065\uff46\066\uff46\070\uff46\071\uff46\001" +
    "\002\000\062\004\uff5b\005\uff5b\007\uff5b\010\uff5b\013\uff5b" +
    "\020\uff5b\027\uff5b\036\uff5b\037\uff5b\043\uff5b\046\uff5b\047" +
    "\uff5b\050\uff5b\052\uff5b\053\uff5b\056\uff5b\057\uff5b\060\uff5b" +
    "\062\uff5b\063\uff5b\065\uff5b\066\uff5b\070\uff5b\071\uff5b\001" +
    "\002\000\004\065\141\001\002\000\004\065\137\001\002" +
    "\000\046\004\120\017\130\032\113\045\122\050\114\051" +
    "\123\054\110\055\127\060\125\061\112\067\116\071\131" +
    "\074\101\104\107\105\126\106\111\107\073\111\117\001" +
    "\002\000\062\004\uff57\005\uff57\007\uff57\010\uff57\013\uff57" +
    "\020\uff57\027\uff57\036\uff57\037\uff57\043\uff57\046\uff57\047" +
    "\uff57\050\uff57\052\uff57\053\uff57\056\uff57\057\uff57\060\uff57" +
    "\062\uff57\063\uff57\065\uff57\066\uff57\070\uff57\071\uff57\001" +
    "\002\000\076\004\uff4e\005\uff4e\006\uff4e\007\uff4e\010\uff4e" +
    "\013\uff4e\020\uff4e\024\uff4e\027\uff4e\036\uff4e\037\uff4e\043" +
    "\uff4e\044\uff4e\045\uff4e\046\uff4e\047\uff4e\050\uff4e\051\uff4e" +
    "\052\uff4e\053\uff4e\056\uff4e\057\uff4e\060\uff4e\061\uff4e\062" +
    "\uff4e\063\uff4e\065\uff4e\066\uff4e\070\uff4e\071\uff4e\001\002" +
    "\000\062\004\uff56\005\uff56\007\uff56\010\uff56\013\uff56\020" +
    "\uff56\027\uff56\036\uff56\037\uff56\043\uff56\046\uff56\047\uff56" +
    "\050\uff56\052\uff56\053\uff56\056\uff56\057\uff56\060\uff56\062" +
    "\uff56\063\uff56\065\uff56\066\uff56\070\uff56\071\uff56\001\002" +
    "\000\062\004\uff5c\005\uff5c\007\uff5c\010\uff5c\013\uff5c\020" +
    "\uff5c\027\uff5c\036\uff5c\037\uff5c\043\uff5c\046\uff5c\047\uff5c" +
    "\050\uff5c\052\uff5c\053\uff5c\056\uff5c\057\uff5c\060\uff5c\062" +
    "\uff5c\063\uff5c\065\uff5c\066\uff5c\070\uff5c\071\uff5c\001\002" +
    "\000\064\004\120\011\035\014\033\017\130\032\113\033" +
    "\036\034\034\041\037\045\122\050\114\051\123\054\110" +
    "\055\127\060\125\061\112\067\116\071\131\074\101\103" +
    "\027\104\107\105\126\106\111\107\073\110\032\111\117" +
    "\001\002\000\004\065\150\001\002\000\004\065\147\001" +
    "\002\000\062\004\uff58\005\uff58\007\uff58\010\uff58\013\uff58" +
    "\020\uff58\027\uff58\036\uff58\037\uff58\043\uff58\046\uff58\047" +
    "\uff58\050\uff58\052\uff58\053\uff58\056\uff58\057\uff58\060\uff58" +
    "\062\uff58\063\uff58\065\uff58\066\uff58\070\uff58\071\uff58\001" +
    "\002\000\062\004\uff59\005\uff59\007\uff59\010\uff59\013\uff59" +
    "\020\uff59\027\uff59\036\uff59\037\uff59\043\uff59\046\uff59\047" +
    "\uff59\050\uff59\052\uff59\053\uff59\056\uff59\057\uff59\060\uff59" +
    "\062\uff59\063\uff59\065\uff59\066\uff59\070\uff59\071\uff59\001" +
    "\002\000\062\004\uff5a\005\uff5a\007\uff5a\010\uff5a\013\uff5a" +
    "\020\uff5a\027\uff5a\036\uff5a\037\uff5a\043\uff5a\046\uff5a\047" +
    "\uff5a\050\uff5a\052\uff5a\053\uff5a\056\uff5a\057\uff5a\060\uff5a" +
    "\062\uff5a\063\uff5a\065\uff5a\066\uff5a\070\uff5a\071\uff5a\001" +
    "\002\000\046\004\uff7e\017\uff7e\032\uff7e\045\uff7e\050\uff7e" +
    "\051\uff7e\054\uff7e\055\uff7e\060\uff7e\061\uff7e\067\uff7e\071" +
    "\uff7e\074\uff7e\104\uff7e\105\uff7e\106\uff7e\107\uff7e\111\uff7e" +
    "\001\002\000\046\004\120\017\130\032\113\045\122\050" +
    "\114\051\123\054\110\055\127\060\125\061\112\067\116" +
    "\071\131\074\101\104\107\105\126\106\111\107\073\111" +
    "\117\001\002\000\060\004\uff6b\005\uff6b\010\uff6b\013\uff6b" +
    "\020\uff6b\027\uff6b\036\uff6b\037\uff6b\043\uff6b\046\uff6b\047" +
    "\uff6b\050\uff6b\052\uff6b\053\uff6b\056\uff6b\057\uff6b\060\uff6b" +
    "\062\uff6b\063\uff6b\065\uff6b\066\uff6b\070\uff6b\071\uff6b\001" +
    "\002\000\024\005\156\020\uff7d\043\uff7d\056\uff7d\057\uff7d" +
    "\062\uff7d\063\uff7d\065\uff7d\066\uff7d\001\002\000\046\004" +
    "\uff7b\017\uff7b\032\uff7b\045\uff7b\050\uff7b\051\uff7b\054\uff7b" +
    "\055\uff7b\060\uff7b\061\uff7b\067\uff7b\071\uff7b\074\uff7b\104" +
    "\uff7b\105\uff7b\106\uff7b\107\uff7b\111\uff7b\001\002\000\046" +
    "\004\120\017\130\032\113\045\122\050\114\051\123\054" +
    "\110\055\127\060\125\061\112\067\116\071\131\074\101" +
    "\104\107\105\126\106\111\107\073\111\117\001\002\000" +
    "\026\005\uff7a\010\161\020\uff7a\043\uff7a\056\uff7a\057\uff7a" +
    "\062\uff7a\063\uff7a\065\uff7a\066\uff7a\001\002\000\046\004" +
    "\120\017\130\032\113\045\122\050\114\051\123\054\110" +
    "\055\127\060\125\061\112\067\116\071\131\074\101\104" +
    "\107\105\126\106\111\107\073\111\117\001\002\000\030" +
    "\005\uff78\010\uff78\013\163\020\uff78\043\uff78\056\uff78\057" +
    "\uff78\062\uff78\063\uff78\065\uff78\066\uff78\001\002\000\046" +
    "\004\120\017\130\032\113\045\122\050\114\051\123\054" +
    "\110\055\127\060\125\061\112\067\116\071\131\074\101" +
    "\104\107\105\126\106\111\107\073\111\117\001\002\000" +
    "\032\004\165\005\uff76\010\uff76\013\uff76\020\uff76\043\uff76" +
    "\056\uff76\057\uff76\062\uff76\063\uff76\065\uff76\066\uff76\001" +
    "\002\000\046\004\120\017\130\032\113\045\122\050\114" +
    "\051\123\054\110\055\127\060\125\061\112\067\116\071" +
    "\131\074\101\104\107\105\126\106\111\107\073\111\117" +
    "\001\002\000\036\004\uff74\005\uff74\010\uff74\013\uff74\020" +
    "\uff74\027\171\043\uff74\053\170\056\uff74\057\uff74\062\uff74" +
    "\063\uff74\065\uff74\066\uff74\001\002\000\046\004\120\017" +
    "\130\032\113\045\122\050\114\051\123\054\110\055\127" +
    "\060\125\061\112\067\116\071\131\074\101\104\107\105" +
    "\126\106\111\107\073\111\117\001\002\000\046\004\uff69" +
    "\017\uff69\032\uff69\045\uff69\050\uff69\051\uff69\054\uff69\055" +
    "\uff69\060\uff69\061\uff69\067\uff69\071\uff69\074\uff69\104\uff69" +
    "\105\uff69\106\uff69\107\uff69\111\uff69\001\002\000\046\004" +
    "\uff6a\017\uff6a\032\uff6a\045\uff6a\050\uff6a\051\uff6a\054\uff6a" +
    "\055\uff6a\060\uff6a\061\uff6a\067\uff6a\071\uff6a\074\uff6a\104" +
    "\uff6a\105\uff6a\106\uff6a\107\uff6a\111\uff6a\001\002\000\046" +
    "\004\uff72\005\uff72\010\uff72\013\uff72\020\uff72\027\uff72\036" +
    "\177\037\173\043\uff72\046\175\047\174\053\uff72\056\uff72" +
    "\057\uff72\062\uff72\063\uff72\065\uff72\066\uff72\001\002\000" +
    "\046\004\uff65\017\uff65\032\uff65\045\uff65\050\uff65\051\uff65" +
    "\054\uff65\055\uff65\060\uff65\061\uff65\067\uff65\071\uff65\074" +
    "\uff65\104\uff65\105\uff65\106\uff65\107\uff65\111\uff65\001\002" +
    "\000\046\004\uff66\017\uff66\032\uff66\045\uff66\050\uff66\051" +
    "\uff66\054\uff66\055\uff66\060\uff66\061\uff66\067\uff66\071\uff66" +
    "\074\uff66\104\uff66\105\uff66\106\uff66\107\uff66\111\uff66\001" +
    "\002\000\046\004\uff68\017\uff68\032\uff68\045\uff68\050\uff68" +
    "\051\uff68\054\uff68\055\uff68\060\uff68\061\uff68\067\uff68\071" +
    "\uff68\074\uff68\104\uff68\105\uff68\106\uff68\107\uff68\111\uff68" +
    "\001\002\000\046\004\120\017\130\032\113\045\122\050" +
    "\114\051\123\054\110\055\127\060\125\061\112\067\116" +
    "\071\131\074\101\104\107\105\126\106\111\107\073\111" +
    "\117\001\002\000\046\004\uff67\017\uff67\032\uff67\045\uff67" +
    "\050\uff67\051\uff67\054\uff67\055\uff67\060\uff67\061\uff67\067" +
    "\uff67\071\uff67\074\uff67\104\uff67\105\uff67\106\uff67\107\uff67" +
    "\111\uff67\001\002\000\052\004\uff70\005\uff70\010\uff70\013" +
    "\uff70\020\uff70\027\uff70\036\uff70\037\uff70\043\uff70\046\uff70" +
    "\047\uff70\050\202\053\uff70\056\uff70\057\uff70\060\201\062" +
    "\uff70\063\uff70\065\uff70\066\uff70\001\002\000\046\004\uff64" +
    "\017\uff64\032\uff64\045\uff64\050\uff64\051\uff64\054\uff64\055" +
    "\uff64\060\uff64\061\uff64\067\uff64\071\uff64\074\uff64\104\uff64" +
    "\105\uff64\106\uff64\107\uff64\111\uff64\001\002\000\046\004" +
    "\uff63\017\uff63\032\uff63\045\uff63\050\uff63\051\uff63\054\uff63" +
    "\055\uff63\060\uff63\061\uff63\067\uff63\071\uff63\074\uff63\104" +
    "\uff63\105\uff63\106\uff63\107\uff63\111\uff63\001\002\000\046" +
    "\004\120\017\130\032\113\045\122\050\114\051\123\054" +
    "\110\055\127\060\125\061\112\067\116\071\131\074\101" +
    "\104\107\105\126\106\111\107\073\111\117\001\002\000" +
    "\060\004\uff6e\005\uff6e\010\uff6e\013\uff6e\020\uff6e\027\uff6e" +
    "\036\uff6e\037\uff6e\043\uff6e\046\uff6e\047\uff6e\050\uff6e\052" +
    "\205\053\uff6e\056\uff6e\057\uff6e\060\uff6e\062\uff6e\063\uff6e" +
    "\065\uff6e\066\uff6e\070\207\071\206\001\002\000\046\004" +
    "\uff60\017\uff60\032\uff60\045\uff60\050\uff60\051\uff60\054\uff60" +
    "\055\uff60\060\uff60\061\uff60\067\uff60\071\uff60\074\uff60\104" +
    "\uff60\105\uff60\106\uff60\107\uff60\111\uff60\001\002\000\046" +
    "\004\uff62\017\uff62\032\uff62\045\uff62\050\uff62\051\uff62\054" +
    "\uff62\055\uff62\060\uff62\061\uff62\067\uff62\071\uff62\074\uff62" +
    "\104\uff62\105\uff62\106\uff62\107\uff62\111\uff62\001\002\000" +
    "\046\004\uff61\017\uff61\032\uff61\045\uff61\050\uff61\051\uff61" +
    "\054\uff61\055\uff61\060\uff61\061\uff61\067\uff61\071\uff61\074" +
    "\uff61\104\uff61\105\uff61\106\uff61\107\uff61\111\uff61\001\002" +
    "\000\046\004\120\017\130\032\113\045\122\050\114\051" +
    "\123\054\110\055\127\060\125\061\112\067\116\071\131" +
    "\074\101\104\107\105\126\106\111\107\073\111\117\001" +
    "\002\000\060\004\uff6c\005\uff6c\010\uff6c\013\uff6c\020\uff6c" +
    "\027\uff6c\036\uff6c\037\uff6c\043\uff6c\046\uff6c\047\uff6c\050" +
    "\uff6c\052\uff6c\053\uff6c\056\uff6c\057\uff6c\060\uff6c\062\uff6c" +
    "\063\uff6c\065\uff6c\066\uff6c\070\uff6c\071\uff6c\001\002\000" +
    "\012\004\uffd3\065\uffd3\110\uffd3\111\uffd3\001\002\000\046" +
    "\004\120\017\130\032\113\045\122\050\114\051\123\054" +
    "\110\055\127\060\125\061\112\067\116\071\131\074\101" +
    "\104\107\105\126\106\111\107\073\111\117\001\002\000" +
    "\050\004\120\017\130\032\113\045\122\050\114\051\123" +
    "\054\110\055\127\060\125\061\112\065\uff87\067\116\071" +
    "\131\074\101\104\107\105\126\106\111\107\073\111\117" +
    "\001\002\000\076\004\uff51\005\uff51\006\uff51\007\uff51\010" +
    "\uff51\013\uff51\020\uff51\024\uff51\027\uff51\036\uff51\037\uff51" +
    "\043\uff51\044\uff51\045\uff51\046\uff51\047\uff51\050\uff51\051" +
    "\uff51\052\uff51\053\uff51\056\uff51\057\uff51\060\uff51\061\uff51" +
    "\062\uff51\063\uff51\065\uff51\066\uff51\070\uff51\071\uff51\001" +
    "\002\000\004\111\221\001\002\000\004\111\220\001\002" +
    "\000\076\004\uff52\005\uff52\006\uff52\007\uff52\010\uff52\013" +
    "\uff52\020\uff52\024\uff52\027\uff52\036\uff52\037\uff52\043\uff52" +
    "\044\uff52\045\uff52\046\uff52\047\uff52\050\uff52\051\uff52\052" +
    "\uff52\053\uff52\056\uff52\057\uff52\060\uff52\061\uff52\062\uff52" +
    "\063\uff52\065\uff52\066\uff52\070\uff52\071\uff52\001\002\000" +
    "\076\004\uff54\005\uff54\006\uff54\007\uff54\010\uff54\013\uff54" +
    "\020\uff54\024\uff54\027\uff54\036\uff54\037\uff54\043\uff54\044" +
    "\uff54\045\uff54\046\uff54\047\uff54\050\uff54\051\uff54\052\uff54" +
    "\053\uff54\056\uff54\057\uff54\060\uff54\061\uff54\062\uff54\063" +
    "\uff54\065\uff54\066\uff54\070\uff54\071\uff54\001\002\000\006" +
    "\020\226\065\uff88\001\002\000\006\020\uff86\065\uff86\001" +
    "\002\000\004\065\225\001\002\000\076\004\uff50\005\uff50" +
    "\006\uff50\007\uff50\010\uff50\013\uff50\020\uff50\024\uff50\027" +
    "\uff50\036\uff50\037\uff50\043\uff50\044\uff50\045\uff50\046\uff50" +
    "\047\uff50\050\uff50\051\uff50\052\uff50\053\uff50\056\uff50\057" +
    "\uff50\060\uff50\061\uff50\062\uff50\063\uff50\065\uff50\066\uff50" +
    "\070\uff50\071\uff50\001\002\000\046\004\120\017\130\032" +
    "\113\045\122\050\114\051\123\054\110\055\127\060\125" +
    "\061\112\067\116\071\131\074\101\104\107\105\126\106" +
    "\111\107\073\111\117\001\002\000\006\020\uff85\065\uff85" +
    "\001\002\000\004\063\231\001\002\000\076\004\uff53\005" +
    "\uff53\006\uff53\007\uff53\010\uff53\013\uff53\020\uff53\024\uff53" +
    "\027\uff53\036\uff53\037\uff53\043\uff53\044\uff53\045\uff53\046" +
    "\uff53\047\uff53\050\uff53\051\uff53\052\uff53\053\uff53\056\uff53" +
    "\057\uff53\060\uff53\061\uff53\062\uff53\063\uff53\065\uff53\066" +
    "\uff53\070\uff53\071\uff53\001\002\000\046\004\120\017\130" +
    "\032\113\045\122\050\114\051\123\054\110\055\127\060" +
    "\125\061\112\067\116\071\131\074\101\104\107\105\126" +
    "\106\111\107\073\111\117\001\002\000\020\020\uff80\043" +
    "\uff80\057\uff80\062\uff80\063\uff80\065\uff80\066\uff80\001\002" +
    "\000\004\045\235\001\002\000\046\004\120\017\130\032" +
    "\113\045\122\050\114\051\123\054\110\055\127\060\125" +
    "\061\112\067\116\071\131\074\101\104\107\105\126\106" +
    "\111\107\073\111\117\001\002\000\004\065\237\001\002" +
    "\000\020\004\uffd5\044\uffd5\045\uffd5\065\uffd5\071\uffd5\110" +
    "\uffd5\111\uffd5\001\002\000\006\020\uffab\066\uffab\001\002" +
    "\000\006\020\242\066\243\001\002\000\004\110\244\001" +
    "\002\000\134\002\uffed\004\uffed\011\uffed\012\uffed\014\uffed" +
    "\015\uffed\017\uffed\021\uffed\022\uffed\023\uffed\030\uffed\031" +
    "\uffed\032\uffed\033\uffed\034\uffed\035\uffed\040\uffed\041\uffed" +
    "\043\uffed\045\uffed\050\uffed\051\uffed\054\uffed\055\uffed\060" +
    "\uffed\061\uffed\062\uffed\064\uffed\067\uffed\071\uffed\072\uffed" +
    "\073\uffed\074\uffed\075\uffed\076\uffed\077\uffed\100\uffed\102" +
    "\uffed\103\uffed\104\uffed\105\uffed\106\uffed\107\uffed\110\uffed" +
    "\111\uffed\001\002\000\006\020\uffaa\066\uffaa\001\002\000" +
    "\040\002\ufffb\011\ufffb\014\ufffb\021\ufffb\031\ufffb\033\ufffb" +
    "\034\ufffb\035\ufffb\041\ufffb\072\ufffb\073\ufffb\075\ufffb\102" +
    "\ufffb\103\ufffb\110\ufffb\001\002\000\010\044\065\071\061" +
    "\111\uffd2\001\002\000\010\044\uffde\071\uffde\111\uffde\001" +
    "\002\000\004\111\302\001\002\000\004\016\274\001\002" +
    "\000\022\011\035\014\033\033\036\034\251\041\037\102" +
    "\254\103\027\110\032\001\002\000\010\044\065\071\061" +
    "\111\uffd2\001\002\000\004\111\255\001\002\000\004\007" +
    "\256\001\002\000\046\004\120\017\130\032\113\045\122" +
    "\050\114\051\123\054\110\055\127\060\125\061\112\067" +
    "\116\071\131\074\101\104\107\105\126\106\111\107\073" +
    "\111\117\001\002\000\004\066\260\001\002\000\134\002" +
    "\ufff0\004\ufff0\011\ufff0\012\ufff0\014\ufff0\015\ufff0\017\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\030\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\034\ufff0\035\ufff0\040\ufff0\041\ufff0\043\ufff0\045\ufff0" +
    "\050\ufff0\051\ufff0\054\ufff0\055\ufff0\060\ufff0\061\ufff0\062" +
    "\ufff0\064\ufff0\067\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0" +
    "\075\ufff0\076\ufff0\077\ufff0\100\ufff0\102\ufff0\103\ufff0\104" +
    "\ufff0\105\ufff0\106\ufff0\107\ufff0\110\ufff0\111\ufff0\001\002" +
    "\000\004\111\271\001\002\000\006\020\263\066\264\001" +
    "\002\000\010\044\065\071\061\111\uffd2\001\002\000\134" +
    "\002\ufff1\004\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1\017" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\030\ufff1\031\ufff1\032\ufff1" +
    "\033\ufff1\034\ufff1\035\ufff1\040\ufff1\041\ufff1\043\ufff1\045" +
    "\ufff1\050\ufff1\051\ufff1\054\ufff1\055\ufff1\060\ufff1\061\ufff1" +
    "\062\ufff1\064\ufff1\067\ufff1\071\ufff1\072\ufff1\073\ufff1\074" +
    "\ufff1\075\ufff1\076\ufff1\077\ufff1\100\ufff1\102\ufff1\103\ufff1" +
    "\104\ufff1\105\ufff1\106\ufff1\107\ufff1\110\ufff1\111\ufff1\001" +
    "\002\000\004\111\266\001\002\000\004\007\267\001\002" +
    "\000\046\004\120\017\130\032\113\045\122\050\114\051" +
    "\123\054\110\055\127\060\125\061\112\067\116\071\131" +
    "\074\101\104\107\105\126\106\111\107\073\111\117\001" +
    "\002\000\006\020\uffa6\066\uffa6\001\002\000\004\007\272" +
    "\001\002\000\046\004\120\017\130\032\113\045\122\050" +
    "\114\051\123\054\110\055\127\060\125\061\112\067\116" +
    "\071\131\074\101\104\107\105\126\106\111\107\073\111" +
    "\117\001\002\000\006\020\uffa7\066\uffa7\001\002\000\020" +
    "\011\035\014\033\033\036\041\037\101\043\103\027\110" +
    "\032\001\002\000\006\004\044\045\uffae\001\002\000\004" +
    "\045\277\001\002\000\022\011\035\014\033\033\036\034" +
    "\034\041\037\065\uffb3\103\027\110\032\001\002\000\004" +
    "\065\301\001\002\000\010\044\uffdd\071\uffdd\111\uffdd\001" +
    "\002\000\004\007\303\001\002\000\046\004\120\017\130" +
    "\032\113\045\122\050\114\051\123\054\110\055\127\060" +
    "\125\061\112\067\116\071\131\074\101\104\107\105\126" +
    "\106\111\107\073\111\117\001\002\000\004\066\305\001" +
    "\002\000\134\002\ufff2\004\ufff2\011\ufff2\012\ufff2\014\ufff2" +
    "\015\ufff2\017\ufff2\021\ufff2\022\ufff2\023\ufff2\030\ufff2\031" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\040\ufff2\041\ufff2" +
    "\043\ufff2\045\ufff2\050\ufff2\051\ufff2\054\ufff2\055\ufff2\060" +
    "\ufff2\061\ufff2\062\ufff2\064\ufff2\067\ufff2\071\ufff2\072\ufff2" +
    "\073\ufff2\074\ufff2\075\ufff2\076\ufff2\077\ufff2\100\ufff2\102" +
    "\ufff2\103\ufff2\104\ufff2\105\ufff2\106\ufff2\107\ufff2\110\ufff2" +
    "\111\ufff2\001\002\000\004\111\325\001\002\000\006\020" +
    "\310\066\311\001\002\000\010\044\065\071\061\111\uffd2" +
    "\001\002\000\134\002\ufff3\004\ufff3\011\ufff3\012\ufff3\014" +
    "\ufff3\015\ufff3\017\ufff3\021\ufff3\022\ufff3\023\ufff3\030\ufff3" +
    "\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\040\ufff3\041" +
    "\ufff3\043\ufff3\045\ufff3\050\ufff3\051\ufff3\054\ufff3\055\ufff3" +
    "\060\ufff3\061\ufff3\062\ufff3\064\ufff3\067\ufff3\071\ufff3\072" +
    "\ufff3\073\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3\100\ufff3" +
    "\102\ufff3\103\ufff3\104\ufff3\105\ufff3\106\ufff3\107\ufff3\110" +
    "\ufff3\111\ufff3\001\002\000\004\111\313\001\002\000\010" +
    "\007\315\020\uffa3\066\uffa3\001\002\000\006\020\uffa8\066" +
    "\uffa8\001\002\000\050\004\120\017\130\032\113\043\317" +
    "\045\122\050\114\051\123\054\110\055\127\060\125\061" +
    "\112\067\116\071\131\074\101\104\107\105\126\106\111" +
    "\107\073\111\117\001\002\000\006\020\uffa5\066\uffa5\001" +
    "\002\000\046\004\120\017\130\032\113\045\122\050\114" +
    "\051\123\054\110\055\127\060\125\061\112\067\116\071" +
    "\131\074\101\104\107\105\126\106\111\107\073\111\117" +
    "\001\002\000\006\020\uffa2\062\uffa2\001\002\000\006\020" +
    "\323\062\322\001\002\000\006\020\uffa4\066\uffa4\001\002" +
    "\000\046\004\120\017\130\032\113\045\122\050\114\051" +
    "\123\054\110\055\127\060\125\061\112\067\116\071\131" +
    "\074\101\104\107\105\126\106\111\107\073\111\117\001" +
    "\002\000\006\020\uffa1\062\uffa1\001\002\000\010\007\315" +
    "\020\uffa3\066\uffa3\001\002\000\006\020\uffa9\066\uffa9\001" +
    "\002\000\004\043\330\001\002\000\022\011\uffec\014\uffec" +
    "\033\uffec\034\uffec\035\uffec\041\uffec\103\uffec\110\uffec\001" +
    "\002\000\022\011\035\014\033\033\036\034\034\035\010" +
    "\041\037\103\027\110\032\001\002\000\004\111\342\001" +
    "\002\000\024\011\035\014\033\033\036\034\034\035\010" +
    "\041\037\062\336\103\027\110\032\001\002\000\024\011" +
    "\uffea\014\uffea\033\uffea\034\uffea\035\uffea\041\uffea\062\uffea" +
    "\103\uffea\110\uffea\001\002\000\024\011\uffe7\014\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\041\uffe7\062\uffe7\103\uffe7\110\uffe7" +
    "\001\002\000\004\066\340\001\002\000\024\011\uffe9\014" +
    "\uffe9\033\uffe9\034\uffe9\035\uffe9\041\uffe9\062\uffe9\103\uffe9" +
    "\110\uffe9\001\002\000\134\002\uffeb\004\uffeb\011\uffeb\012" +
    "\uffeb\014\uffeb\015\uffeb\017\uffeb\021\uffeb\022\uffeb\023\uffeb" +
    "\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\040" +
    "\uffeb\041\uffeb\043\uffeb\045\uffeb\050\uffeb\051\uffeb\054\uffeb" +
    "\055\uffeb\060\uffeb\061\uffeb\062\uffeb\064\uffeb\067\uffeb\071" +
    "\uffeb\072\uffeb\073\uffeb\074\uffeb\075\uffeb\076\uffeb\077\uffeb" +
    "\100\uffeb\102\uffeb\103\uffeb\104\uffeb\105\uffeb\106\uffeb\107" +
    "\uffeb\110\uffeb\111\uffeb\001\002\000\006\020\343\066\344" +
    "\001\002\000\006\020\uffad\066\uffad\001\002\000\004\111" +
    "\345\001\002\000\024\011\uffe8\014\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\041\uffe8\062\uffe8\103\uffe8\110\uffe8\001\002\000" +
    "\006\020\uffac\066\uffac\001\002\000\020\011\035\014\033" +
    "\033\036\041\037\101\043\103\027\110\032\001\002\000" +
    "\006\004\044\111\uffae\001\002\000\004\111\351\001\002" +
    "\000\004\045\uffe6\001\002\000\004\045\353\001\002\000" +
    "\022\011\035\014\033\033\036\034\034\041\037\065\uffb3" +
    "\103\027\110\032\001\002\000\004\065\355\001\002\000" +
    "\004\043\uffe5\001\002\000\004\043\357\001\002\000\126" +
    "\004\120\011\uffee\012\u0107\014\uffee\015\377\017\130\021" +
    "\uffee\022\364\023\365\030\u0104\032\113\033\uffee\034\uffee" +
    "\040\u010b\041\uffee\043\372\045\122\050\114\051\123\054" +
    "\110\055\127\060\125\061\112\062\uffc6\064\367\067\116" +
    "\071\131\072\014\073\011\074\101\075\024\076\362\077" +
    "\373\100\363\102\uffee\103\uffee\104\107\105\126\106\111" +
    "\107\073\110\uffee\111\117\001\002\000\126\004\uffba\011" +
    "\uffba\012\uffba\014\uffba\015\uffba\017\uffba\021\uffba\022\uffba" +
    "\023\uffba\030\uffba\032\uffba\033\uffba\034\uffba\040\uffba\041" +
    "\uffba\043\uffba\045\uffba\050\uffba\051\uffba\054\uffba\055\uffba" +
    "\060\uffba\061\uffba\062\uffba\064\uffba\067\uffba\071\uffba\072" +
    "\uffba\073\uffba\074\uffba\075\uffba\076\uffba\077\uffba\100\uffba" +
    "\102\uffba\103\uffba\104\uffba\105\uffba\106\uffba\107\uffba\110" +
    "\uffba\111\uffba\001\002\000\126\004\uffb9\011\uffb9\012\uffb9" +
    "\014\uffb9\015\uffb9\017\uffb9\021\uffb9\022\uffb9\023\uffb9\030" +
    "\uffb9\032\uffb9\033\uffb9\034\uffb9\040\uffb9\041\uffb9\043\uffb9" +
    "\045\uffb9\050\uffb9\051\uffb9\054\uffb9\055\uffb9\060\uffb9\061" +
    "\uffb9\062\uffb9\064\uffb9\067\uffb9\071\uffb9\072\uffb9\073\uffb9" +
    "\074\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9\102\uffb9\103" +
    "\uffb9\104\uffb9\105\uffb9\106\uffb9\107\uffb9\110\uffb9\111\uffb9" +
    "\001\002\000\046\004\uff9a\017\uff9a\032\uff9a\045\uff9a\050" +
    "\uff9a\051\uff9a\054\uff9a\055\uff9a\060\uff9a\061\uff9a\067\uff9a" +
    "\071\uff9a\074\uff9a\104\uff9a\105\uff9a\106\uff9a\107\uff9a\111" +
    "\uff9a\001\002\000\046\004\120\017\130\032\113\045\122" +
    "\050\114\051\123\054\110\055\127\060\125\061\112\067" +
    "\116\071\131\074\101\104\107\105\126\106\111\107\073" +
    "\111\117\001\002\000\004\066\u0135\001\002\000\004\057" +
    "\u012d\001\002\000\126\004\uffb8\011\uffb8\012\uffb8\014\uffb8" +
    "\015\uffb8\017\uffb8\021\uffb8\022\uffb8\023\uffb8\030\uffb8\032" +
    "\uffb8\033\uffb8\034\uffb8\040\uffb8\041\uffb8\043\uffb8\045\uffb8" +
    "\050\uffb8\051\uffb8\054\uffb8\055\uffb8\060\uffb8\061\uffb8\062" +
    "\uffb8\064\uffb8\067\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8" +
    "\075\uffb8\076\uffb8\077\uffb8\100\uffb8\102\uffb8\103\uffb8\104" +
    "\uffb8\105\uffb8\106\uffb8\107\uffb8\110\uffb8\111\uffb8\001\002" +
    "\000\050\004\120\017\130\032\113\045\122\050\114\051" +
    "\123\054\110\055\127\060\125\061\112\066\u012b\067\116" +
    "\071\131\074\101\104\107\105\126\106\111\107\073\111" +
    "\117\001\002\000\126\004\uffb7\011\uffb7\012\uffb7\014\uffb7" +
    "\015\uffb7\017\uffb7\021\uffb7\022\uffb7\023\uffb7\030\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\040\uffb7\041\uffb7\043\uffb7\045\uffb7" +
    "\050\uffb7\051\uffb7\054\uffb7\055\uffb7\060\uffb7\061\uffb7\062" +
    "\uffb7\064\uffb7\067\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7" +
    "\075\uffb7\076\uffb7\077\uffb7\100\uffb7\102\uffb7\103\uffb7\104" +
    "\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7\111\uffb7\001\002" +
    "\000\126\004\uffbd\011\uffbd\012\uffbd\014\uffbd\015\uffbd\017" +
    "\uffbd\021\uffbd\022\uffbd\023\uffbd\030\uffbd\032\uffbd\033\uffbd" +
    "\034\uffbd\040\uffbd\041\uffbd\043\uffbd\045\uffbd\050\uffbd\051" +
    "\uffbd\054\uffbd\055\uffbd\060\uffbd\061\uffbd\062\uffbd\064\uffbd" +
    "\067\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076" +
    "\uffbd\077\uffbd\100\uffbd\102\uffbd\103\uffbd\104\uffbd\105\uffbd" +
    "\106\uffbd\107\uffbd\110\uffbd\111\uffbd\001\002\000\126\004" +
    "\uffca\011\uffca\012\uffca\014\uffca\015\uffca\017\uffca\021\uffca" +
    "\022\uffca\023\uffca\030\uffca\032\uffca\033\uffca\034\uffca\040" +
    "\uffca\041\uffca\043\uffca\045\uffca\050\uffca\051\uffca\054\uffca" +
    "\055\uffca\060\uffca\061\uffca\062\uffca\064\uffca\067\uffca\071" +
    "\uffca\072\uffca\073\uffca\074\uffca\075\uffca\076\uffca\077\uffca" +
    "\100\uffca\102\uffca\103\uffca\104\uffca\105\uffca\106\uffca\107" +
    "\uffca\110\uffca\111\uffca\001\002\000\046\004\120\017\130" +
    "\032\113\045\122\050\114\051\123\054\110\055\127\060" +
    "\125\061\112\067\116\071\131\074\101\104\107\105\126" +
    "\106\111\107\073\111\117\001\002\000\126\004\120\011" +
    "\uffee\012\u0107\014\uffee\015\377\017\130\021\uffee\022\364" +
    "\023\365\030\u0104\032\113\033\uffee\034\uffee\040\u010b\041" +
    "\uffee\043\372\045\122\050\114\051\123\054\110\055\127" +
    "\060\125\061\112\062\uffc7\064\367\067\116\071\131\072" +
    "\014\073\011\074\101\075\024\076\362\077\373\100\363" +
    "\102\uffee\103\uffee\104\107\105\126\106\111\107\073\110" +
    "\uffee\111\117\001\002\000\126\004\uffb6\011\uffb6\012\uffb6" +
    "\014\uffb6\015\uffb6\017\uffb6\021\uffb6\022\uffb6\023\uffb6\030" +
    "\uffb6\032\uffb6\033\uffb6\034\uffb6\040\uffb6\041\uffb6\043\uffb6" +
    "\045\uffb6\050\uffb6\051\uffb6\054\uffb6\055\uffb6\060\uffb6\061" +
    "\uffb6\062\uffb6\064\uffb6\067\uffb6\071\uffb6\072\uffb6\073\uffb6" +
    "\074\uffb6\075\uffb6\076\uffb6\077\uffb6\100\uffb6\102\uffb6\103" +
    "\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6\110\uffb6\111\uffb6" +
    "\001\002\000\126\004\uffc0\011\uffc0\012\uffc0\014\uffc0\015" +
    "\uffc0\017\uffc0\021\uffc0\022\uffc0\023\uffc0\030\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\040\uffc0\041\uffc0\043\uffc0\045\uffc0\050" +
    "\uffc0\051\uffc0\054\uffc0\055\uffc0\060\uffc0\061\uffc0\062\uffc0" +
    "\064\uffc0\067\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0\075" +
    "\uffc0\076\uffc0\077\uffc0\100\uffc0\102\uffc0\103\uffc0\104\uffc0" +
    "\105\uffc0\106\uffc0\107\uffc0\110\uffc0\111\uffc0\001\002\000" +
    "\004\042\u0120\001\002\000\126\004\uffbe\011\uffbe\012\uffbe" +
    "\014\uffbe\015\uffbe\017\uffbe\021\uffbe\022\uffbe\023\uffbe\030" +
    "\uffbe\032\uffbe\033\uffbe\034\uffbe\040\uffbe\041\uffbe\043\uffbe" +
    "\045\uffbe\050\uffbe\051\uffbe\054\uffbe\055\uffbe\060\uffbe\061" +
    "\uffbe\062\uffbe\064\uffbe\067\uffbe\071\uffbe\072\uffbe\073\uffbe" +
    "\074\uffbe\075\uffbe\076\uffbe\077\uffbe\100\uffbe\102\uffbe\103" +
    "\uffbe\104\uffbe\105\uffbe\106\uffbe\107\uffbe\110\uffbe\111\uffbe" +
    "\001\002\000\004\066\u011f\001\002\000\126\004\uffc1\011" +
    "\uffc1\012\uffc1\014\uffc1\015\uffc1\017\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\030\uffc1\032\uffc1\033\uffc1\034\uffc1\040\uffc1\041" +
    "\uffc1\043\uffc1\045\uffc1\050\uffc1\051\uffc1\054\uffc1\055\uffc1" +
    "\060\uffc1\061\uffc1\062\uffc1\064\uffc1\067\uffc1\071\uffc1\072" +
    "\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1\100\uffc1" +
    "\102\uffc1\103\uffc1\104\uffc1\105\uffc1\106\uffc1\107\uffc1\110" +
    "\uffc1\111\uffc1\001\002\000\004\062\u011e\001\002\000\004" +
    "\045\u011a\001\002\000\126\004\uffc3\011\uffc3\012\uffc3\014" +
    "\uffc3\015\uffc3\017\uffc3\021\uffc3\022\uffc3\023\uffc3\030\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\040\uffc3\041\uffc3\043\uffc3\045" +
    "\uffc3\050\uffc3\051\uffc3\054\uffc3\055\uffc3\060\uffc3\061\uffc3" +
    "\062\uffc3\064\uffc3\067\uffc3\071\uffc3\072\uffc3\073\uffc3\074" +
    "\uffc3\075\uffc3\076\uffc3\077\uffc3\100\uffc3\102\uffc3\103\uffc3" +
    "\104\uffc3\105\uffc3\106\uffc3\107\uffc3\110\uffc3\111\uffc3\001" +
    "\002\000\126\004\uffc5\011\uffc5\012\uffc5\014\uffc5\015\uffc5" +
    "\017\uffc5\021\uffc5\022\uffc5\023\uffc5\030\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\040\uffc5\041\uffc5\043\uffc5\045\uffc5\050\uffc5" +
    "\051\uffc5\054\uffc5\055\uffc5\060\uffc5\061\uffc5\062\uffc5\064" +
    "\uffc5\067\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5" +
    "\076\uffc5\077\uffc5\100\uffc5\102\uffc5\103\uffc5\104\uffc5\105" +
    "\uffc5\106\uffc5\107\uffc5\110\uffc5\111\uffc5\001\002\000\004" +
    "\066\u0119\001\002\000\126\004\uffc2\011\uffc2\012\uffc2\014" +
    "\uffc2\015\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2\030\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\040\uffc2\041\uffc2\043\uffc2\045" +
    "\uffc2\050\uffc2\051\uffc2\054\uffc2\055\uffc2\060\uffc2\061\uffc2" +
    "\062\uffc2\064\uffc2\067\uffc2\071\uffc2\072\uffc2\073\uffc2\074" +
    "\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2\102\uffc2\103\uffc2" +
    "\104\uffc2\105\uffc2\106\uffc2\107\uffc2\110\uffc2\111\uffc2\001" +
    "\002\000\126\004\uffbb\011\uffbb\012\uffbb\014\uffbb\015\uffbb" +
    "\017\uffbb\021\uffbb\022\uffbb\023\uffbb\030\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\040\uffbb\041\uffbb\043\uffbb\045\uffbb\050\uffbb" +
    "\051\uffbb\054\uffbb\055\uffbb\060\uffbb\061\uffbb\062\uffbb\064" +
    "\uffbb\067\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb" +
    "\076\uffbb\077\uffbb\100\uffbb\102\uffbb\103\uffbb\104\uffbb\105" +
    "\uffbb\106\uffbb\107\uffbb\110\uffbb\111\uffbb\001\002\000\126" +
    "\004\uffb5\011\uffb5\012\uffb5\014\uffb5\015\uffb5\017\uffb5\021" +
    "\uffb5\022\uffb5\023\uffb5\030\uffb5\032\uffb5\033\uffb5\034\uffb5" +
    "\040\uffb5\041\uffb5\043\uffb5\045\uffb5\050\uffb5\051\uffb5\054" +
    "\uffb5\055\uffb5\060\uffb5\061\uffb5\062\uffb5\064\uffb5\067\uffb5" +
    "\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077" +
    "\uffb5\100\uffb5\102\uffb5\103\uffb5\104\uffb5\105\uffb5\106\uffb5" +
    "\107\uffb5\110\uffb5\111\uffb5\001\002\000\046\004\120\017" +
    "\130\032\113\045\122\050\114\051\123\054\110\055\127" +
    "\060\125\061\112\067\116\071\131\074\101\104\107\105" +
    "\126\106\111\107\073\111\117\001\002\000\126\004\uffbc" +
    "\011\uffbc\012\uffbc\014\uffbc\015\uffbc\017\uffbc\021\uffbc\022" +
    "\uffbc\023\uffbc\030\uffbc\032\uffbc\033\uffbc\034\uffbc\040\uffbc" +
    "\041\uffbc\043\uffbc\045\uffbc\050\uffbc\051\uffbc\054\uffbc\055" +
    "\uffbc\060\uffbc\061\uffbc\062\uffbc\064\uffbc\067\uffbc\071\uffbc" +
    "\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100" +
    "\uffbc\102\uffbc\103\uffbc\104\uffbc\105\uffbc\106\uffbc\107\uffbc" +
    "\110\uffbc\111\uffbc\001\002\000\004\043\u010e\001\002\000" +
    "\126\004\uffa0\011\uffa0\012\uffa0\014\uffa0\015\uffa0\017\uffa0" +
    "\021\uffa0\022\uffa0\023\uffa0\030\uffa0\032\uffa0\033\uffa0\034" +
    "\uffa0\040\uffa0\041\uffa0\043\uffa0\045\uffa0\050\uffa0\051\uffa0" +
    "\054\uffa0\055\uffa0\060\uffa0\061\uffa0\062\uffa0\064\uffa0\067" +
    "\uffa0\071\uffa0\072\uffa0\073\uffa0\074\uffa0\075\uffa0\076\uffa0" +
    "\077\uffa0\100\uffa0\102\uffa0\103\uffa0\104\uffa0\105\uffa0\106" +
    "\uffa0\107\uffa0\110\uffa0\111\uffa0\001\002\000\126\004\120" +
    "\011\uffee\012\u0107\014\uffee\015\377\017\130\021\uffee\022" +
    "\364\023\365\030\u0104\032\113\033\uffee\034\uffee\040\u010b" +
    "\041\uffee\043\372\045\122\050\114\051\123\054\110\055" +
    "\127\060\125\061\112\062\uffc6\064\367\067\116\071\131" +
    "\072\014\073\011\074\101\075\024\076\362\077\373\100" +
    "\363\102\uffee\103\uffee\104\107\105\126\106\111\107\073" +
    "\110\uffee\111\117\001\002\000\004\062\uff9f\001\002\000" +
    "\004\062\u0112\001\002\000\130\004\uff9b\011\uff9b\012\uff9b" +
    "\014\uff9b\015\uff9b\017\uff9b\021\uff9b\022\uff9b\023\uff9b\025" +
    "\u0114\030\uff9b\032\uff9b\033\uff9b\034\uff9b\040\uff9b\041\uff9b" +
    "\043\uff9b\045\uff9b\050\uff9b\051\uff9b\054\uff9b\055\uff9b\060" +
    "\uff9b\061\uff9b\062\uff9b\064\uff9b\067\uff9b\071\uff9b\072\uff9b" +
    "\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b\100\uff9b\102" +
    "\uff9b\103\uff9b\104\uff9b\105\uff9b\106\uff9b\107\uff9b\110\uff9b" +
    "\111\uff9b\001\002\000\126\004\uff9e\011\uff9e\012\uff9e\014" +
    "\uff9e\015\uff9e\017\uff9e\021\uff9e\022\uff9e\023\uff9e\030\uff9e" +
    "\032\uff9e\033\uff9e\034\uff9e\040\uff9e\041\uff9e\043\uff9e\045" +
    "\uff9e\050\uff9e\051\uff9e\054\uff9e\055\uff9e\060\uff9e\061\uff9e" +
    "\062\uff9e\064\uff9e\067\uff9e\071\uff9e\072\uff9e\073\uff9e\074" +
    "\uff9e\075\uff9e\076\uff9e\077\uff9e\100\uff9e\102\uff9e\103\uff9e" +
    "\104\uff9e\105\uff9e\106\uff9e\107\uff9e\110\uff9e\111\uff9e\001" +
    "\002\000\004\043\u0115\001\002\000\126\004\uff9d\011\uff9d" +
    "\012\uff9d\014\uff9d\015\uff9d\017\uff9d\021\uff9d\022\uff9d\023" +
    "\uff9d\030\uff9d\032\uff9d\033\uff9d\034\uff9d\040\uff9d\041\uff9d" +
    "\043\uff9d\045\uff9d\050\uff9d\051\uff9d\054\uff9d\055\uff9d\060" +
    "\uff9d\061\uff9d\062\uff9d\064\uff9d\067\uff9d\071\uff9d\072\uff9d" +
    "\073\uff9d\074\uff9d\075\uff9d\076\uff9d\077\uff9d\100\uff9d\102" +
    "\uff9d\103\uff9d\104\uff9d\105\uff9d\106\uff9d\107\uff9d\110\uff9d" +
    "\111\uff9d\001\002\000\126\004\120\011\uffee\012\u0107\014" +
    "\uffee\015\377\017\130\021\uffee\022\364\023\365\030\u0104" +
    "\032\113\033\uffee\034\uffee\040\u010b\041\uffee\043\372\045" +
    "\122\050\114\051\123\054\110\055\127\060\125\061\112" +
    "\062\uffc6\064\367\067\116\071\131\072\014\073\011\074" +
    "\101\075\024\076\362\077\373\100\363\102\uffee\103\uffee" +
    "\104\107\105\126\106\111\107\073\110\uffee\111\117\001" +
    "\002\000\004\062\u0118\001\002\000\126\004\uff9c\011\uff9c" +
    "\012\uff9c\014\uff9c\015\uff9c\017\uff9c\021\uff9c\022\uff9c\023" +
    "\uff9c\030\uff9c\032\uff9c\033\uff9c\034\uff9c\040\uff9c\041\uff9c" +
    "\043\uff9c\045\uff9c\050\uff9c\051\uff9c\054\uff9c\055\uff9c\060" +
    "\uff9c\061\uff9c\062\uff9c\064\uff9c\067\uff9c\071\uff9c\072\uff9c" +
    "\073\uff9c\074\uff9c\075\uff9c\076\uff9c\077\uff9c\100\uff9c\102" +
    "\uff9c\103\uff9c\104\uff9c\105\uff9c\106\uff9c\107\uff9c\110\uff9c" +
    "\111\uff9c\001\002\000\126\004\uff96\011\uff96\012\uff96\014" +
    "\uff96\015\uff96\017\uff96\021\uff96\022\uff96\023\uff96\030\uff96" +
    "\032\uff96\033\uff96\034\uff96\040\uff96\041\uff96\043\uff96\045" +
    "\uff96\050\uff96\051\uff96\054\uff96\055\uff96\060\uff96\061\uff96" +
    "\062\uff96\064\uff96\067\uff96\071\uff96\072\uff96\073\uff96\074" +
    "\uff96\075\uff96\076\uff96\077\uff96\100\uff96\102\uff96\103\uff96" +
    "\104\uff96\105\uff96\106\uff96\107\uff96\110\uff96\111\uff96\001" +
    "\002\000\046\004\120\017\130\032\113\045\122\050\114" +
    "\051\123\054\110\055\127\060\125\061\112\067\116\071" +
    "\131\074\101\104\107\105\126\106\111\107\073\111\117" +
    "\001\002\000\004\065\u011c\001\002\000\004\066\u011d\001" +
    "\002\000\126\004\uff94\011\uff94\012\uff94\014\uff94\015\uff94" +
    "\017\uff94\021\uff94\022\uff94\023\uff94\030\uff94\032\uff94\033" +
    "\uff94\034\uff94\040\uff94\041\uff94\043\uff94\045\uff94\050\uff94" +
    "\051\uff94\054\uff94\055\uff94\060\uff94\061\uff94\062\uff94\064" +
    "\uff94\067\uff94\071\uff94\072\uff94\073\uff94\074\uff94\075\uff94" +
    "\076\uff94\077\uff94\100\uff94\102\uff94\103\uff94\104\uff94\105" +
    "\uff94\106\uff94\107\uff94\110\uff94\111\uff94\001\002\000\042" +
    "\002\uffe4\011\uffe4\014\uffe4\021\uffe4\031\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\041\uffe4\062\uffe4\072\uffe4\073\uffe4\075\uffe4" +
    "\102\uffe4\103\uffe4\110\uffe4\001\002\000\126\004\uffbf\011" +
    "\uffbf\012\uffbf\014\uffbf\015\uffbf\017\uffbf\021\uffbf\022\uffbf" +
    "\023\uffbf\030\uffbf\032\uffbf\033\uffbf\034\uffbf\040\uffbf\041" +
    "\uffbf\043\uffbf\045\uffbf\050\uffbf\051\uffbf\054\uffbf\055\uffbf" +
    "\060\uffbf\061\uffbf\062\uffbf\064\uffbf\067\uffbf\071\uffbf\072" +
    "\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf" +
    "\102\uffbf\103\uffbf\104\uffbf\105\uffbf\106\uffbf\107\uffbf\110" +
    "\uffbf\111\uffbf\001\002\000\046\004\120\017\130\032\113" +
    "\045\122\050\114\051\123\054\110\055\127\060\125\061" +
    "\112\067\116\071\131\074\101\104\107\105\126\106\111" +
    "\107\073\111\117\001\002\000\004\066\u0122\001\002\000" +
    "\126\004\uff8f\011\uff8f\012\uff8f\014\uff8f\015\uff8f\017\uff8f" +
    "\021\uff8f\022\uff8f\023\uff8f\030\uff8f\032\uff8f\033\uff8f\034" +
    "\uff8f\040\uff8f\041\uff8f\043\uff8f\045\uff8f\050\uff8f\051\uff8f" +
    "\054\uff8f\055\uff8f\060\uff8f\061\uff8f\062\uff8f\064\uff8f\067" +
    "\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f\076\uff8f" +
    "\077\uff8f\100\uff8f\102\uff8f\103\uff8f\104\uff8f\105\uff8f\106" +
    "\uff8f\107\uff8f\110\uff8f\111\uff8f\001\002\000\126\004\uffc4" +
    "\011\uffc4\012\uffc4\014\uffc4\015\uffc4\017\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\030\uffc4\032\uffc4\033\uffc4\034\uffc4\040\uffc4" +
    "\041\uffc4\043\uffc4\045\uffc4\050\uffc4\051\uffc4\054\uffc4\055" +
    "\uffc4\060\uffc4\061\uffc4\062\uffc4\064\uffc4\067\uffc4\071\uffc4" +
    "\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\100" +
    "\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4\106\uffc4\107\uffc4" +
    "\110\uffc4\111\uffc4\001\002\000\004\066\u0125\001\002\000" +
    "\126\004\uff91\011\uff91\012\uff91\014\uff91\015\uff91\017\uff91" +
    "\021\uff91\022\uff91\023\uff91\030\uff91\032\uff91\033\uff91\034" +
    "\uff91\040\uff91\041\uff91\043\uff91\045\uff91\050\uff91\051\uff91" +
    "\054\uff91\055\uff91\060\uff91\061\uff91\062\uff91\064\uff91\067" +
    "\uff91\071\uff91\072\uff91\073\uff91\074\uff91\075\uff91\076\uff91" +
    "\077\uff91\100\uff91\102\uff91\103\uff91\104\uff91\105\uff91\106" +
    "\uff91\107\uff91\110\uff91\111\uff91\001\002\000\126\004\120" +
    "\011\uffee\012\u0107\014\uffee\015\377\017\130\021\uffee\022" +
    "\364\023\365\030\u0104\032\113\033\uffee\034\uffee\040\u010b" +
    "\041\uffee\043\372\045\122\050\114\051\123\054\110\055" +
    "\127\060\125\061\112\062\uffc6\064\367\067\116\071\131" +
    "\072\014\073\011\074\101\075\024\076\362\077\373\100" +
    "\363\102\uffee\103\uffee\104\107\105\126\106\111\107\073" +
    "\110\uffee\111\117\001\002\000\004\062\uffc9\001\002\000" +
    "\004\062\u0129\001\002\000\126\004\uffc8\011\uffc8\012\uffc8" +
    "\014\uffc8\015\uffc8\017\uffc8\021\uffc8\022\uffc8\023\uffc8\030" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\040\uffc8\041\uffc8\043\uffc8" +
    "\045\uffc8\050\uffc8\051\uffc8\054\uffc8\055\uffc8\060\uffc8\061" +
    "\uffc8\062\uffc8\064\uffc8\067\uffc8\071\uffc8\072\uffc8\073\uffc8" +
    "\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\102\uffc8\103" +
    "\uffc8\104\uffc8\105\uffc8\106\uffc8\107\uffc8\110\uffc8\111\uffc8" +
    "\001\002\000\004\066\u012c\001\002\000\126\004\uff93\011" +
    "\uff93\012\uff93\014\uff93\015\uff93\017\uff93\021\uff93\022\uff93" +
    "\023\uff93\030\uff93\032\uff93\033\uff93\034\uff93\040\uff93\041" +
    "\uff93\043\uff93\045\uff93\050\uff93\051\uff93\054\uff93\055\uff93" +
    "\060\uff93\061\uff93\062\uff93\064\uff93\067\uff93\071\uff93\072" +
    "\uff93\073\uff93\074\uff93\075\uff93\076\uff93\077\uff93\100\uff93" +
    "\102\uff93\103\uff93\104\uff93\105\uff93\106\uff93\107\uff93\110" +
    "\uff93\111\uff93\001\002\000\126\004\uff92\011\uff92\012\uff92" +
    "\014\uff92\015\uff92\017\uff92\021\uff92\022\uff92\023\uff92\030" +
    "\uff92\032\uff92\033\uff92\034\uff92\040\uff92\041\uff92\043\uff92" +
    "\045\uff92\050\uff92\051\uff92\054\uff92\055\uff92\060\uff92\061" +
    "\uff92\062\uff92\064\uff92\067\uff92\071\uff92\072\uff92\073\uff92" +
    "\074\uff92\075\uff92\076\uff92\077\uff92\100\uff92\102\uff92\103" +
    "\uff92\104\uff92\105\uff92\106\uff92\107\uff92\110\uff92\111\uff92" +
    "\001\002\000\050\004\120\017\130\026\u0130\032\113\045" +
    "\122\050\114\051\123\054\110\055\127\060\125\061\112" +
    "\067\116\071\131\074\101\104\107\105\126\106\111\107" +
    "\073\111\117\001\002\000\006\057\u0132\066\u0133\001\002" +
    "\000\006\057\uff8d\066\uff8d\001\002\000\006\057\uff8a\066" +
    "\uff8a\001\002\000\006\057\uff8b\066\uff8b\001\002\000\050" +
    "\004\120\017\130\026\u0130\032\113\045\122\050\114\051" +
    "\123\054\110\055\127\060\125\061\112\067\116\071\131" +
    "\074\101\104\107\105\126\106\111\107\073\111\117\001" +
    "\002\000\126\004\uff8e\011\uff8e\012\uff8e\014\uff8e\015\uff8e" +
    "\017\uff8e\021\uff8e\022\uff8e\023\uff8e\030\uff8e\032\uff8e\033" +
    "\uff8e\034\uff8e\040\uff8e\041\uff8e\043\uff8e\045\uff8e\050\uff8e" +
    "\051\uff8e\054\uff8e\055\uff8e\060\uff8e\061\uff8e\062\uff8e\064" +
    "\uff8e\067\uff8e\071\uff8e\072\uff8e\073\uff8e\074\uff8e\075\uff8e" +
    "\076\uff8e\077\uff8e\100\uff8e\102\uff8e\103\uff8e\104\uff8e\105" +
    "\uff8e\106\uff8e\107\uff8e\110\uff8e\111\uff8e\001\002\000\006" +
    "\057\uff8c\066\uff8c\001\002\000\126\004\uff95\011\uff95\012" +
    "\uff95\014\uff95\015\uff95\017\uff95\021\uff95\022\uff95\023\uff95" +
    "\030\uff95\032\uff95\033\uff95\034\uff95\040\uff95\041\uff95\043" +
    "\uff95\045\uff95\050\uff95\051\uff95\054\uff95\055\uff95\060\uff95" +
    "\061\uff95\062\uff95\064\uff95\067\uff95\071\uff95\072\uff95\073" +
    "\uff95\074\uff95\075\uff95\076\uff95\077\uff95\100\uff95\102\uff95" +
    "\103\uff95\104\uff95\105\uff95\106\uff95\107\uff95\110\uff95\111" +
    "\uff95\001\002\000\004\066\u0137\001\002\000\126\004\uff90" +
    "\011\uff90\012\uff90\014\uff90\015\uff90\017\uff90\021\uff90\022" +
    "\uff90\023\uff90\030\uff90\032\uff90\033\uff90\034\uff90\040\uff90" +
    "\041\uff90\043\uff90\045\uff90\050\uff90\051\uff90\054\uff90\055" +
    "\uff90\060\uff90\061\uff90\062\uff90\064\uff90\067\uff90\071\uff90" +
    "\072\uff90\073\uff90\074\uff90\075\uff90\076\uff90\077\uff90\100" +
    "\uff90\102\uff90\103\uff90\104\uff90\105\uff90\106\uff90\107\uff90" +
    "\110\uff90\111\uff90\001\002\000\046\004\120\017\130\032" +
    "\113\045\122\050\114\051\123\054\110\055\127\060\125" +
    "\061\112\067\116\071\131\074\101\104\107\105\126\106" +
    "\111\107\073\111\117\001\002\000\004\043\u013a\001\002" +
    "\000\126\004\uff99\011\uff99\012\uff99\014\uff99\015\uff99\017" +
    "\uff99\021\uff99\022\uff99\023\uff99\030\uff99\032\uff99\033\uff99" +
    "\034\uff99\040\uff99\041\uff99\043\uff99\045\uff99\050\uff99\051" +
    "\uff99\054\uff99\055\uff99\060\uff99\061\uff99\062\uff99\064\uff99" +
    "\067\uff99\071\uff99\072\uff99\073\uff99\074\uff99\075\uff99\076" +
    "\uff99\077\uff99\100\uff99\102\uff99\103\uff99\104\uff99\105\uff99" +
    "\106\uff99\107\uff99\110\uff99\111\uff99\001\002\000\126\004" +
    "\120\011\uffee\012\u0107\014\uffee\015\377\017\130\021\uffee" +
    "\022\364\023\365\030\u0104\032\113\033\uffee\034\uffee\040" +
    "\u010b\041\uffee\043\372\045\122\050\114\051\123\054\110" +
    "\055\127\060\125\061\112\062\uffc6\064\367\067\116\071" +
    "\131\072\014\073\011\074\101\075\024\076\362\077\373" +
    "\100\363\102\uffee\103\uffee\104\107\105\126\106\111\107" +
    "\073\110\uffee\111\117\001\002\000\004\062\uff98\001\002" +
    "\000\004\062\u013e\001\002\000\126\004\uff97\011\uff97\012" +
    "\uff97\014\uff97\015\uff97\017\uff97\021\uff97\022\uff97\023\uff97" +
    "\030\uff97\032\uff97\033\uff97\034\uff97\040\uff97\041\uff97\043" +
    "\uff97\045\uff97\050\uff97\051\uff97\054\uff97\055\uff97\060\uff97" +
    "\061\uff97\062\uff97\064\uff97\067\uff97\071\uff97\072\uff97\073" +
    "\uff97\074\uff97\075\uff97\076\uff97\077\uff97\100\uff97\102\uff97" +
    "\103\uff97\104\uff97\105\uff97\106\uff97\107\uff97\110\uff97\111" +
    "\uff97\001\002\000\004\111\342\001\002\000\004\016\u0141" +
    "\001\002\000\020\011\035\014\033\033\036\041\037\101" +
    "\043\103\027\110\032\001\002\000\004\111\u0143\001\002" +
    "\000\004\045\uffe3\001\002\000\004\045\u0145\001\002\000" +
    "\022\011\035\014\033\033\036\034\034\041\037\065\uffb3" +
    "\103\027\110\032\001\002\000\004\065\u0147\001\002\000" +
    "\004\066\uffe2\001\002\000\004\066\u0149\001\002\000\040" +
    "\002\uffe1\011\uffe1\014\uffe1\021\uffe1\031\uffe1\033\uffe1\034" +
    "\uffe1\035\uffe1\041\uffe1\072\uffe1\073\uffe1\075\uffe1\102\uffe1" +
    "\103\uffe1\110\uffe1\001\002\000\006\020\343\066\u014b\001" +
    "\002\000\040\002\ufff4\011\ufff4\014\ufff4\021\ufff4\031\ufff4" +
    "\033\ufff4\034\ufff4\035\ufff4\041\ufff4\072\ufff4\073\ufff4\075" +
    "\ufff4\102\ufff4\103\ufff4\110\ufff4\001\002\000\004\002\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014a\000\006\003\003\114\004\001\001\000\002\001" +
    "\001\000\026\004\021\005\017\006\014\007\016\010\005" +
    "\011\020\012\012\013\022\014\015\036\011\001\001\000" +
    "\002\001\001\000\012\072\025\073\027\074\030\075\u013e" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\072" +
    "\025\073\027\074\246\076\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\244\007\016\010\005\011\020" +
    "\012\012\013\022\014\015\036\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\072\025" +
    "\073\027\074\030\075\024\001\001\000\004\103\240\001" +
    "\001\000\002\001\001\000\004\122\233\001\001\000\002" +
    "\001\001\000\010\035\062\070\065\106\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\072" +
    "\025\073\027\074\040\077\041\001\001\000\010\035\062" +
    "\071\057\106\061\001\001\000\004\040\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\046\050\072\025\073\027\074\030\075\046\105\051\107" +
    "\047\001\001\000\004\040\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\046\054\072\025\073\027\074\030\075\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\034\123\043" +
    "\120\050\102\053\114\054\105\055\104\056\103\057\101" +
    "\060\077\061\075\062\073\063\071\064\067\065\070\066" +
    "\076\067\074\001\001\000\002\001\001\000\004\035\063" +
    "\001\001\000\004\042\207\001\001\000\002\001\001\000" +
    "\004\041\202\001\001\000\002\001\001\000\004\045\175" +
    "\001\001\000\002\001\001\000\004\044\166\001\001\000" +
    "\004\043\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\034\123\043\120\065\150\066\076\067\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\034\123\043\120\065\142\066\076\067\074" +
    "\001\001\000\014\034\123\043\120\065\141\066\076\067" +
    "\074\001\001\000\050\034\123\043\120\053\134\054\105" +
    "\055\104\056\103\057\101\060\077\061\075\062\073\063" +
    "\071\064\067\065\070\066\076\067\074\072\025\073\027" +
    "\074\030\075\135\001\001\000\002\001\001\000\014\034" +
    "\123\043\120\065\133\066\076\067\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\034\123\043\120\065\131\066\076\067\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\034\123" +
    "\043\120\065\137\066\076\067\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\034\123\043\120\065\144\066\076\067\074\072" +
    "\025\073\027\074\030\075\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\133\152\001\001\000\034\034\123" +
    "\043\120\055\154\056\103\057\101\060\077\061\075\062" +
    "\073\063\071\064\067\065\153\066\076\067\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\134\156\001" +
    "\001\000\032\034\123\043\120\056\157\057\101\060\077" +
    "\061\075\062\073\063\071\064\067\065\153\066\076\067" +
    "\074\001\001\000\002\001\001\000\030\034\123\043\120" +
    "\057\161\060\077\061\075\062\073\063\071\064\067\065" +
    "\153\066\076\067\074\001\001\000\002\001\001\000\026" +
    "\034\123\043\120\060\163\061\075\062\073\063\071\064" +
    "\067\065\153\066\076\067\074\001\001\000\002\001\001" +
    "\000\024\034\123\043\120\061\165\062\073\063\071\064" +
    "\067\065\153\066\076\067\074\001\001\000\004\044\166" +
    "\001\001\000\022\034\123\043\120\062\171\063\071\064" +
    "\067\065\153\066\076\067\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\034\123" +
    "\043\120\063\177\064\067\065\153\066\076\067\074\001" +
    "\001\000\002\001\001\000\004\041\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\034\123\043\120\064" +
    "\203\065\153\066\076\067\074\001\001\000\004\042\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\034\123\043\120\065\210\066\076\067\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\034" +
    "\123\043\120\053\227\054\105\055\104\056\103\057\101" +
    "\060\077\061\075\062\073\063\071\064\067\065\070\066" +
    "\076\067\074\001\001\000\044\034\123\043\120\053\222" +
    "\054\105\055\104\056\103\057\101\060\077\061\075\062" +
    "\073\063\071\064\067\065\070\066\076\067\074\110\223" +
    "\111\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\034\123\043\120\053\226\054\105\055\104" +
    "\056\103\057\101\060\077\061\075\062\073\063\071\064" +
    "\067\065\070\066\076\067\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\034\123\043" +
    "\120\053\232\054\105\055\104\056\103\057\101\060\077" +
    "\061\075\062\073\063\071\064\067\065\070\066\076\067" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\034\123\043\120\053\235\054\105\055\104\056\103\057" +
    "\101\060\077\061\075\062\073\063\071\064\067\065\070" +
    "\066\076\067\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\035\062\070\305\106\066\112\306\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\072" +
    "\025\073\027\074\246\076\252\001\001\000\012\035\062" +
    "\070\260\104\261\106\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\034\123\043\120\053\256\054\105" +
    "\055\104\056\103\057\101\060\077\061\075\062\073\063" +
    "\071\064\067\065\070\066\076\067\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\035\062\070\264\106\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\034" +
    "\123\043\120\050\267\053\114\054\105\055\104\056\103" +
    "\057\101\060\077\061\075\062\073\063\071\064\067\065" +
    "\070\066\076\067\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\034\123\043\120\050\272\053\114\054" +
    "\105\055\104\056\103\057\101\060\077\061\075\062\073" +
    "\063\071\064\067\065\070\066\076\067\074\001\001\000" +
    "\002\001\001\000\012\072\025\073\027\074\040\077\274" +
    "\001\001\000\004\040\275\001\001\000\002\001\001\000" +
    "\020\046\050\072\025\073\027\074\030\075\046\105\277" +
    "\107\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\034\123\043\120\053\303\054\105" +
    "\055\104\056\103\057\101\060\077\061\075\062\073\063" +
    "\071\064\067\065\070\066\076\067\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\035\062\070\311\106\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\313\001\001\000" +
    "\002\001\001\000\040\034\123\043\120\053\315\054\105" +
    "\055\104\056\103\057\101\060\077\061\075\062\073\063" +
    "\071\064\067\065\070\066\076\067\074\001\001\000\002" +
    "\001\001\000\042\033\320\034\123\043\120\053\317\054" +
    "\105\055\104\056\103\057\101\060\077\061\075\062\073" +
    "\063\071\064\067\065\070\066\076\067\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\034\123\043\120\053\323\054\105\055\104\056\103\057" +
    "\101\060\077\061\075\062\073\063\071\064\067\065\070" +
    "\066\076\067\074\001\001\000\002\001\001\000\004\051" +
    "\325\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\115\330\001\001\000\020\007\334\072\025\073\027\074" +
    "\030\075\331\101\332\113\333\001\001\000\004\102\340" +
    "\001\001\000\016\007\334\072\025\073\027\074\030\075" +
    "\331\113\336\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\072\025\073\027\074" +
    "\040\077\346\001\001\000\004\040\347\001\001\000\002" +
    "\001\001\000\004\116\351\001\001\000\002\001\001\000" +
    "\020\046\050\072\025\073\027\074\030\075\046\105\353" +
    "\107\047\001\001\000\002\001\001\000\004\117\355\001" +
    "\001\000\002\001\001\000\104\012\u0104\013\u0107\014\u0101" +
    "\015\u0102\016\373\017\u0105\020\375\021\377\022\370\023" +
    "\u010b\024\u0108\025\357\026\360\027\374\030\u0109\031\365" +
    "\032\367\034\123\036\011\043\120\053\u0100\054\105\055" +
    "\104\056\103\057\101\060\077\061\075\062\073\063\071" +
    "\064\067\065\070\066\076\067\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\130\u0137\001\001\000\014" +
    "\034\123\043\120\065\u0135\066\076\067\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\034\123\043\120\053\u0129\054\105\055\104\056\103\057" +
    "\101\060\077\061\075\062\073\063\071\064\067\065\070" +
    "\066\076\067\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\123\u0125\001\001\000\014\034\123\043\120" +
    "\065\u0123\066\076\067\074\001\001\000\100\012\u0104\013" +
    "\u0107\014\u0101\017\u0122\020\375\021\377\022\370\023\u010b" +
    "\024\u0108\025\357\026\360\027\374\030\u0109\031\365\032" +
    "\367\034\123\036\011\043\120\053\u0100\054\105\055\104" +
    "\056\103\057\101\060\077\061\075\062\073\063\071\064" +
    "\067\065\070\066\076\067\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\034\123\043\120\053\u010c\054\105\055\104\056" +
    "\103\057\101\060\077\061\075\062\073\063\071\064\067" +
    "\065\070\066\076\067\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\125\u010e\001\001\000\104\012\u0104" +
    "\013\u0107\014\u0101\015\u010f\016\373\017\u0105\020\375\021" +
    "\377\022\370\023\u010b\024\u0108\025\357\026\360\027\374" +
    "\030\u0109\031\365\032\367\034\123\036\011\043\120\053" +
    "\u0100\054\105\055\104\056\103\057\101\060\077\061\075" +
    "\062\073\063\071\064\067\065\070\066\076\067\074\001" +
    "\001\000\004\126\u0110\001\001\000\002\001\001\000\004" +
    "\037\u0112\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\127\u0115\001\001\000\104\012\u0104\013\u0107\014\u0101" +
    "\015\u0116\016\373\017\u0105\020\375\021\377\022\370\023" +
    "\u010b\024\u0108\025\357\026\360\027\374\030\u0109\031\365" +
    "\032\367\034\123\036\011\043\120\053\u0100\054\105\055" +
    "\104\056\103\057\101\060\077\061\075\062\073\063\071" +
    "\064\067\065\070\066\076\067\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\034\123" +
    "\043\120\053\u011a\054\105\055\104\056\103\057\101\060" +
    "\077\061\075\062\073\063\071\064\067\065\070\066\076" +
    "\067\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\034\123\043\120\065\u0120\066\076\067\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\104\012\u0104\013\u0107\014" +
    "\u0101\015\u0126\016\373\017\u0105\020\375\021\377\022\370" +
    "\023\u010b\024\u0108\025\357\026\360\027\374\030\u0109\031" +
    "\365\032\367\034\123\036\011\043\120\053\u0100\054\105" +
    "\055\104\056\103\057\101\060\077\061\075\062\073\063" +
    "\071\064\067\065\070\066\076\067\074\001\001\000\004" +
    "\124\u0127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\034\123\043\120\052\u012e\053\u0130\054\105\055\104\056" +
    "\103\057\101\060\077\061\075\062\073\063\071\064\067" +
    "\065\070\066\076\067\074\100\u012d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\034\123\043\120\052\u0133\053\u0130\054\105\055" +
    "\104\056\103\057\101\060\077\061\075\062\073\063\071" +
    "\064\067\065\070\066\076\067\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\034\123\043\120\053\u0138\054" +
    "\105\055\104\056\103\057\101\060\077\061\075\062\073" +
    "\063\071\064\067\065\070\066\076\067\074\001\001\000" +
    "\002\001\001\000\004\131\u013a\001\001\000\104\012\u0104" +
    "\013\u0107\014\u0101\015\u013b\016\373\017\u0105\020\375\021" +
    "\377\022\370\023\u010b\024\u0108\025\357\026\360\027\374" +
    "\030\u0109\031\365\032\367\034\123\036\011\043\120\053" +
    "\u0100\054\105\055\104\056\103\057\101\060\077\061\075" +
    "\062\073\063\071\064\067\065\070\066\076\067\074\001" +
    "\001\000\004\132\u013c\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\102\u0149\001\001\000\002\001\001\000" +
    "\012\072\025\073\027\074\040\077\u0141\001\001\000\002" +
    "\001\001\000\004\120\u0143\001\001\000\002\001\001\000" +
    "\020\046\050\072\025\073\027\074\030\075\046\105\u0145" +
    "\107\047\001\001\000\002\001\001\000\004\121\u0147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return new Symbol (sym.EOF); 
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // QualIdent ::= T_ID_U 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       RESULT = ((MyParser) parser).DoQualIdent (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*QualIdent*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Designator3 ::= T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Designator3 ::= T_COLONCOLON T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator4_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Designator3 ::= T_NULLPTR 
            {
              STO RESULT = null;
		
                         RESULT = new ConstSTO ("Literal", new NullPointerType(),"0");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // Designator3 ::= T_FALSE 
            {
              STO RESULT = null;
		
                         RESULT = new ConstSTO ("Literal", new BoolType(), "0");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // Designator3 ::= T_TRUE 
            {
              STO RESULT = null;
		
                    	RESULT = new ConstSTO ("Literal", new BoolType(), "1");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // Designator3 ::= T_STR_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    	if( _1.equals("!")){
                    		((MyParser) parser).DoDebug();
                    	}
                         RESULT = new ConstSTO ("Literal", new StrType(),_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // Designator3 ::= T_CHAR_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                         RESULT = new ConstSTO ("Literal", new CharType(), _1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Designator3 ::= T_FLOAT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                         RESULT = new ConstSTO ("Literal", new FloatType(), _1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Designator3 ::= T_INT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		    
                    	// can move this to a static method later
                    
                        RESULT = new ConstSTO ("Literal", new IntType(), HexandOct.convertString(_1));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Designator3 ::= T_LPAREN Expr T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _2;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Designator2 ::= Designator3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Designator2 ::= Designator2 T_LPAREN OptExprList T_RPAREN 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoFuncCall (_1,_2);
   
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Designator2 ::= Designator2 IncDecOp 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Operator _2 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    	_2.setPreOp(true);
                        RESULT = ((MyParser) parser).DoUnaryExpr( _1, _2 );
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Designator2 ::= Designator2 T_ARROW T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       
                        RESULT = ((MyParser) parser).DoArrowCheck(_1,_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Designator2 ::= Designator2 T_LBRACKET Expr T_RBRACKET 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Array (_1,_5);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Designator2 ::= Designator2 T_DOT T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Dot (_1, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Designator ::= Designator2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Designator ::= IncDecOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _1 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    	_1.setPreOp(false);
						RESULT = ((MyParser) parser).DoUnaryExpr( _2, _1 );
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Designator ::= T_LPAREN Type T_RPAREN Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = ((MyParser) parser). DoCast( _1, _2 );
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Designator ::= T_SIZEOF T_LPAREN Type T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
           RESULT = ((MyParser) parser).DoSizeOfType( _2 );
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Designator ::= T_SIZEOF T_LPAREN Designator T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = ((MyParser) parser).DoSizeOf( _2 );
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Designator ::= T_NOT Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = ((MyParser) parser).DoUnaryExpr ( _1, new NotOpp() );
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Designator ::= UnarySign Designator 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = ((MyParser) parser).DoUnarySign ( _1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Designator ::= T_AMPERSAND Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = ((MyParser) parser).DoAddressCheck( _1 );
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Designator ::= T_STAR Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    	RESULT = ((MyParser) parser).DoDereferenceCheck ( _1 );
			
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // IncDecOp ::= T_MINUSMINUS 
            {
              Operator RESULT = null;
		
                        RESULT = new DecOpp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(33/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // IncDecOp ::= T_PLUSPLUS 
            {
              Operator RESULT = null;
		
                        RESULT = new IncOpp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(33/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // MulOp ::= T_MOD 
            {
              Operator RESULT = null;
		
                        RESULT = new ModOpp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(32/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // MulOp ::= T_SLASH 
            {
              Operator RESULT = null;
		
                        RESULT = new SlashOpp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(32/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // MulOp ::= T_STAR 
            {
              Operator RESULT = null;
		
                        RESULT = new StarOpp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(32/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // AddOp ::= T_MINUS 
            {
              Operator RESULT = null;
		
                        RESULT = new MinusOpp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(31/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // AddOp ::= T_PLUS 
            {
              Operator RESULT = null;
		
                        RESULT = new AddOpp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(31/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Relation ::= T_GTE 
            {
              Operator RESULT = null;
		
						RESULT = new GreaterThanOEOpp();
					
              CUP$parser$result = new java_cup.runtime.Symbol(35/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Relation ::= T_LTE 
            {
              Operator RESULT = null;
		
						RESULT = new LessThanOEOpp();
					
              CUP$parser$result = new java_cup.runtime.Symbol(35/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Relation ::= T_GT 
            {
              Operator RESULT = null;
		
						RESULT = new GreaterThanOpp();
					
              CUP$parser$result = new java_cup.runtime.Symbol(35/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Relation ::= T_LT 
            {
              Operator RESULT = null;
		
						RESULT = new LessThanOpp();
					
              CUP$parser$result = new java_cup.runtime.Symbol(35/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Equality ::= T_NEQ 
            {
              Operator RESULT = null;
		
						RESULT = new NotEqualOpp();
					
              CUP$parser$result = new java_cup.runtime.Symbol(34/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Equality ::= T_EQU 
            {
              Operator RESULT = null;
		
						RESULT = new EqualOpp();
					
              CUP$parser$result = new java_cup.runtime.Symbol(34/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Expr8 ::= Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Expr8 ::= Expr8 MulOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _2 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
          
                        RESULT = ((MyParser) parser).DoBinaryExpr ( _1, _2, _3 );
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Expr7 ::= Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Expr7 ::= Expr7 AddOp Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _2 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr ( _1, _2, _3 );
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Expr6 ::= Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Expr6 ::= Expr6 Relation Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _2 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr ( _1, _2, _3 );
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Expr5 ::= Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Expr5 ::= Expr5 Equality Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _2 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr ( _1, _2, _3 );
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Expr4 ::= Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Expr4 ::= Expr4 T_AMPERSAND Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = ((MyParser) parser).DoBinaryExpr(_1,new BwAndOpp(),_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Expr3 ::= Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Expr3 ::= Expr3 T_CARET Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = ((MyParser) parser).DoBinaryExpr(_1,new BwXorOpp(),_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Expr2 ::= Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Expr2 ::= Expr2 T_BAR Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = ((MyParser) parser).DoBinaryExpr(_1,new BwOrOpp(),_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Expr1 ::= Expr2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
                
              CUP$parser$result = new java_cup.runtime.Symbol(43/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Expr1 ::= Expr1 T_AND NT$16 Expr2 
            {
              STO RESULT = null;
              // propagate RESULT from NT$16
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = ((MyParser) parser).DoBinaryExpr(_1,new AndOpp(),_2);
                
              CUP$parser$result = new java_cup.runtime.Symbol(43/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$16 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

					 ((MyParser) parser).DoAmpersand(_1);
				
              CUP$parser$result = new java_cup.runtime.Symbol(90/*NT$16*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Expr0 ::= Expr1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(42/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Expr0 ::= Expr0 T_OR NT$15 Expr1 
            {
              STO RESULT = null;
              // propagate RESULT from NT$15
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
     
						RESULT = ((MyParser) parser).DoBinaryExpr(_1,new OrOpp(),_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(42/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$15 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

						 ((MyParser) parser).DoOr(_1);
					
					
              CUP$parser$result = new java_cup.runtime.Symbol(89/*NT$15*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Expr ::= Expr0 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(41/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Expr ::= Designator T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       RESULT = ((MyParser) parser).DoAssignExpr (_1,_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(41/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OptExpr ::= 
            {
              STO RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*OptExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OptExpr ::= Expr 
            {
              STO RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*OptExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // UnarySign ::= T_PLUS 
            {
              String RESULT = null;
		
						RESULT = "+";
					
              CUP$parser$result = new java_cup.runtime.Symbol(26/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // UnarySign ::= T_MINUS 
            {
              String RESULT = null;
		
						RESULT = "-";
					
              CUP$parser$result = new java_cup.runtime.Symbol(26/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ExprList ::= ExprList T_COMMA Expr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    				   	RESULT = _1;
    					RESULT.addElement(_3);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(71/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ExprList ::= Expr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = new Vector();
						RESULT.addElement(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(71/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OptExprList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(70/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OptExprList ::= ExprList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(70/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ConstExpr ::= Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				 	RESULT = _1;
				 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*ConstExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // WritePair ::= T_ENDL 
            {
              STO RESULT = null;
		
    			  	 RESULT = new ConstSTO("endl",new StrType());
    			  
              CUP$parser$result = new java_cup.runtime.Symbol(40/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // WritePair ::= Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				 	RESULT = _1;
				 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // WritePairList ::= WritePairList T_OSTREAM WritePair 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					RESULT = _1;
    					RESULT.addElement(_3);
    					((MyParser) parser).DoCout(_3);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(62/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // WritePairList ::= WritePair 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = new Vector();
						RESULT.addElement(_1);
						((MyParser) parser).DoCout(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(62/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // WriteStmt ::= T_COUT T_OSTREAM WritePairList T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						
					
              CUP$parser$result = new java_cup.runtime.Symbol(24/*WriteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ReadStmt ::= T_CIN T_ISTREAM Designator T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						((MyParser) parser).DoCin(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(23/*ReadStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DeleteStmt ::= T_DELETE Designator T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						((MyParser) parser).DoDeleteCheck(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(22/*DeleteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NewStmt ::= T_NEW Designator T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						((MyParser) parser).DoNewCheck(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(21/*NewStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ReturnStmt ::= T_RETURN Expr T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    					((MyParser) parser).DoReturnExpr (_1);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(20/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ReturnStmt ::= T_RETURN T_SEMI 
            {
              Object RESULT = null;
		
						((MyParser) parser).DoReturnVoid ();
					
              CUP$parser$result = new java_cup.runtime.Symbol(20/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ExitStmt ::= T_EXIT T_LPAREN Expr T_RPAREN T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					    ((MyParser) parser).DoExit (_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(19/*ExitStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ContinueStmt ::= T_CONTINUE T_SEMI 
            {
              Object RESULT = null;
		
						((MyParser) parser).DoWithinWhile("continue");
					
              CUP$parser$result = new java_cup.runtime.Symbol(18/*ContinueStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // BreakStmt ::= T_BREAK T_SEMI 
            {
              Object RESULT = null;
		
						((MyParser) parser).DoWithinWhile("break");
					
              CUP$parser$result = new java_cup.runtime.Symbol(17/*BreakStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // WhileStmt ::= T_WHILE NT$12 Expr T_LBRACE NT$13 OptStmtList NT$14 T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$12
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
              // propagate RESULT from NT$13
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$14
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*WhileStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$14 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 
				    
				    	((MyParser) parser).DoEndWhile(); 
				   		 ((MyParser) parser).DoBlockClose("while"); 
				    
              CUP$parser$result = new java_cup.runtime.Symbol(88/*NT$14*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$13 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
                    	((MyParser) parser).DoBlockOpen("while"); 
                    	RESULT = ((MyParser) parser).DoConditional (_1,"while");
                    
                    
              CUP$parser$result = new java_cup.runtime.Symbol(87/*NT$13*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$12 ::= 
            {
              Object RESULT = null;

						((MyParser) parser).DoWhileMark();
					
              CUP$parser$result = new java_cup.runtime.Symbol(86/*NT$12*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OptElse ::= 
            {
              String RESULT = null;
		
    					RESULT = "empty";
    				
              CUP$parser$result = new java_cup.runtime.Symbol(29/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OptElse ::= T_ELSE T_LBRACE NT$11 OptStmtList T_RBRACE 
            {
              String RESULT = null;
              // propagate RESULT from NT$11
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
						 ((MyParser) parser).DoEndElse(); 
				   		 ((MyParser) parser).DoBlockClose(); 
					
              CUP$parser$result = new java_cup.runtime.Symbol(29/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$11 ::= 
            {
              Object RESULT = null;

						((MyParser) parser).DoBlockOpen("if");
				
					
              CUP$parser$result = new java_cup.runtime.Symbol(85/*NT$11*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // IfStmt ::= T_IF Expr T_LBRACE NT$9 OptStmtList NT$10 T_RBRACE OptElse 
            {
              Object RESULT = null;
              // propagate RESULT from NT$9
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$10
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						((MyParser) parser).DoOptElse(_4);
					
              CUP$parser$result = new java_cup.runtime.Symbol(15/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$10 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

						((MyParser) parser).DoEndIf(); 
						((MyParser) parser).DoBlockClose("if");
					
              CUP$parser$result = new java_cup.runtime.Symbol(84/*NT$10*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$9 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

						((MyParser) parser).DoElseStart(); 
						((MyParser) parser).DoBlockOpen("if");
						RESULT = ((MyParser) parser).DoConditional (_1,"if");
						
					
              CUP$parser$result = new java_cup.runtime.Symbol(83/*NT$9*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ArrElemsList ::= ArrElemsList T_COMMA Expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*ArrElemsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ArrElemsList ::= Expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*ArrElemsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OptInit ::= 
            {
              STO RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OptInit ::= T_ASSIGN T_LBRACE ArrElemsList T_RBRACE 
            {
              STO RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OptInit ::= T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				
						if ( ((MyParser) parser).DoInitialCheck(_2).equals("0")) {
							RESULT = new ErrorSTO("err");
						}else {
							RESULT  = _2;
						
					   }
					
					
              CUP$parser$result = new java_cup.runtime.Symbol(39/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // IdListWInit ::= IdListWInit T_COMMA OptModifiers T_ID T_ASSIGN ConstExpr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _4 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    
                        if(((MyParser) parser).DoInitialCheck2(_4,_3) == 0 ) {
	                    	RESULT = null;
	                    }else{
	     					_4.setName(_3);
							RESULT = _1;
							RESULT.addElement (_4);
						}
		    
              CUP$parser$result = new java_cup.runtime.Symbol(66/*IdListWInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IdListWInit ::= OptModifiers T_ID T_ASSIGN ConstExpr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    	if (((MyParser) parser).DoInitialCheck2(_2,_1) == 0) {
                    		RESULT = null;
                    	}else{
						
							RESULT = new Vector <ConstSTO>();
							_2.setName(_1);
							RESULT.addElement (_2);
						}
                    
              CUP$parser$result = new java_cup.runtime.Symbol(66/*IdListWInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IdListWOptInit ::= IdListWOptInit T_COMMA OptModifiers T_ID OptInit 
            {
              HashMap RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap _1 = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    
                        RESULT = _1;
                    	HelperSTO helpSTO = new HelperSTO("helper");
                    	helpSTO.setModifierSTO(_5);
                    	helpSTO.setOptInit(_2);
       					RESULT.put(_3,helpSTO);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(72/*IdListWOptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IdListWOptInit ::= OptModifiers T_ID OptInit 
            {
              HashMap RESULT = null;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _4 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    	HelperSTO helpSTO = new HelperSTO("helper");
                    	helpSTO.setModifierSTO(_4);
                    	helpSTO.setOptInit(_2);
                    	RESULT = new HashMap<String, STO>();
       					RESULT.put(_1,helpSTO);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(72/*IdListWOptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // IdListUpper ::= IdListUpper T_COMMA T_ID_U 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(65/*IdListUpper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IdListUpper ::= T_ID_U 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(65/*IdListUpper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IdList ::= IdList T_COMMA T_ID 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*IdList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IdList ::= T_ID 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*IdList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OptRef ::= 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OptRef ::= T_AMPERSAND 
            {
              String RESULT = null;
		
						RESULT = new String("1");
					
              CUP$parser$result = new java_cup.runtime.Symbol(30/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ParamDecl ::= Type OptRef T_ID 
            {
              Parameter RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = new Parameter(_1,_2);
						if ((_3 != null) && (_3.equals("1")) ){
							RESULT.setReference(true);
						}
					
              CUP$parser$result = new java_cup.runtime.Symbol(36/*ParamDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ParamList ::= ParamList T_COMMA ParamDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Parameter _3 = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					RESULT = _1;
    					RESULT.addElement(_3);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(69/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ParamList ::= ParamDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Parameter _1 = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = new Vector();
						RESULT.addElement(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(69/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OptParamList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(67/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OptParamList ::= ParamList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(67/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Stmt ::= DeleteStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Stmt ::= NewStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Stmt ::= WriteStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Stmt ::= ReadStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Stmt ::= ReturnStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Stmt ::= ExitStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Stmt ::= ContinueStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Stmt ::= BreakStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Stmt ::= WhileStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Stmt ::= IfStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Stmt ::= Expr T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Stmt ::= CodeBlock 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Stmt ::= TypedefDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Stmt ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Stmt ::= VarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // StmtList ::= StmtList Stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // StmtList ::= Stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OptStmtList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OptStmtList ::= StmtList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CodeBlock ::= T_LBRACE NT$7 OptStmtList NT$8 T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$8
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*CodeBlock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$8 ::= 
            {
              Object RESULT = null;
 ((MyParser) parser).DoBlockClose(); 
              CUP$parser$result = new java_cup.runtime.Symbol(82/*NT$8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$7 ::= 
            {
              Object RESULT = null;
 ((MyParser) parser).DoBlockOpen(); 
              CUP$parser$result = new java_cup.runtime.Symbol(81/*NT$7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ReturnType ::= T_VOID 
            {
              Type RESULT = null;
		
    					RESULT = new VoidType();
    				
              CUP$parser$result = new java_cup.runtime.Symbol(61/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ReturnType ::= SubType OptPointerList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    
						if (_2 != null) {
							RESULT = ((MyParser) parser).GetArrOrPoint(_2,_1);
						}else {
							RESULT = _1;
						}                       

                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Pointer ::= T_STAR 
            {
              String RESULT = null;
		
						RESULT = "1";
					
              CUP$parser$result = new java_cup.runtime.Symbol(27/*Pointer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PointerList ::= PointerList Pointer 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					RESULT = _1;
    					RESULT.addElement(_3);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(68/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PointerList ::= Pointer 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = new Vector<String>();
						RESULT.addElement(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(68/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OptPointerList ::= 
            {
              STO RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(55/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OptPointerList ::= PointerList 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = ((MyParser) parser).GetPointerExpr(_1);;
					
              CUP$parser$result = new java_cup.runtime.Symbol(55/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OptModifiers ::= 
            {
              STO RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(54/*OptModifiers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OptModifiers ::= T_LBRACKET ConstExpr T_RBRACKET 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = ((MyParser) parser).DoIndexCheck(_1);
						
					
              CUP$parser$result = new java_cup.runtime.Symbol(54/*OptModifiers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OptModifiers ::= PointerList 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = ((MyParser) parser).GetPointerExpr(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(54/*OptModifiers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BasicType ::= T_DECLTYPE NT$6 T_LPAREN Expr T_RPAREN 
            {
              Type RESULT = null;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT =  ((MyParser) parser).DoDeclType(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(57/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$6 ::= 
            {
              Object RESULT = null;
			
						((MyParser) parser).DoDeclType2();
					
              CUP$parser$result = new java_cup.runtime.Symbol(80/*NT$6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BasicType ::= T_CHAR 
            {
              Type RESULT = null;
		
						RESULT = new CharType();
					
              CUP$parser$result = new java_cup.runtime.Symbol(57/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BasicType ::= T_BOOL 
            {
              Type RESULT = null;
		
						RESULT = new BoolType();
					
              CUP$parser$result = new java_cup.runtime.Symbol(57/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BasicType ::= T_FLOAT 
            {
              Type RESULT = null;
		
						RESULT = new FloatType();
					
              CUP$parser$result = new java_cup.runtime.Symbol(57/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BasicType ::= T_INT 
            {
              Type RESULT = null;
		
						RESULT = new IntType();
					
              CUP$parser$result = new java_cup.runtime.Symbol(57/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SubType ::= BasicType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					 RESULT = _1;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(58/*SubType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SubType ::= QualIdent 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				
						Type typ = _1.getType().clone();
						typ.setName(_1.getName());
						typ.setIsTypedef(true);
						RESULT = typ;
						//RESULT = typ.setTypedefName(_1.getName());
						//RESULT = _1.getType();
					
              CUP$parser$result = new java_cup.runtime.Symbol(58/*SubType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // UndecoratedType ::= T_FUNCPTR T_COLON ReturnType OptRef T_LPAREN OptParamList T_RPAREN 
            {
              Type RESULT = null;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type _4 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    					RESULT = ((MyParser) parser).doFunctionPointerType("funcptr", 0, _4, _5, _3 );
    				
              CUP$parser$result = new java_cup.runtime.Symbol(60/*UndecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // UndecoratedType ::= SubType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(60/*UndecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Type ::= T_FUNCPTR T_COLON ReturnType OptRef T_LPAREN OptParamList T_RPAREN 
            {
              Type RESULT = null;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type _4 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    					RESULT = ((MyParser) parser).doFunctionPointerType("funcptr", 0, _4, _5, _3 );
    				
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Type ::= SubType OptModifiers 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						if (_2 != null) {
							RESULT = ((MyParser) parser).GetArrOrPoint(_2,_1);
						}else {
							RESULT = _1;
						}
					
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FuncDecl ::= T_EXTERN T_FUNCTION T_COLON ReturnType T_ID NT$4 T_LPAREN OptParamList T_RPAREN NT$5 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(6/*FuncDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$5 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(79/*NT$5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$4 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoFuncDecl_1(_1,_2,"2");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(78/*NT$4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FuncDef ::= T_FUNCTION T_COLON ReturnType OptRef T_ID NT$2 T_LPAREN OptParamList T_RPAREN NT$3 T_LBRACE OptStmtList T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String _4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(5/*FuncDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$3 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

     
                        ((MyParser) parser).DoFormalParams(_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(77/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$2 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                                     	
                        ((MyParser) parser).DoFuncDecl_1(_1,_2,_4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(76/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FieldList ::= FuncDef 
            {
              HashMap RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(73/*FieldList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FieldList ::= Type IdList T_SEMI 
            {
              HashMap RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = new HashMap<Type,Vector>();
						RESULT.put(_2,_1);

					
              CUP$parser$result = new java_cup.runtime.Symbol(73/*FieldList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FieldsList ::= FieldsList FieldList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		HashMap _3 = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					RESULT = _1;
    					RESULT.addElement(_3);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(63/*FieldsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FieldsList ::= FieldList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		HashMap _1 = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = new Vector();
						RESULT.addElement(_1);
	
					
              CUP$parser$result = new java_cup.runtime.Symbol(63/*FieldsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TypedefDecl ::= T_STRUCTDEF T_ID_U T_LBRACE NT$1 FieldsList T_RBRACE T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    	((MyParser) parser).DoStructCheck(_5,_1);
                         ((MyParser) parser).DoBlockClose();
                       
                    
              CUP$parser$result = new java_cup.runtime.Symbol(10/*TypedefDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$1 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                       ((MyParser) parser).DoStructdefDecl (_1);
                        ((MyParser) parser).DoBlockOpen();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(75/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TypedefDecl ::= T_TYPEDEF Type IdListUpper T_SEMI 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _3 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoTypedefDecl (_2,_3);
       
                    
              CUP$parser$result = new java_cup.runtime.Symbol(10/*TypedefDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OptStatic ::= 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OptStatic ::= T_STATIC 
            {
              String RESULT = null;
		
					RESULT = "true";
				
              CUP$parser$result = new java_cup.runtime.Symbol(28/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ConstDecl ::= OptStatic T_CONST T_AUTO T_ID T_ASSIGN Expr T_SEMI 
            {
              Object RESULT = null;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _6 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    					 ((MyParser) parser).DoConstAutoDecl (_5,_6,_7);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(9/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstDecl ::= OptStatic T_CONST UndecoratedType IdListWInit T_SEMI 
            {
              Object RESULT = null;
		int _8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoConstDecl (_3,_1,_8);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(9/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarDecl ::= OptStatic T_AUTO T_ID T_ASSIGN Expr T_SEMI 
            {
              Object RESULT = null;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _6 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    					 ((MyParser) parser).DoAutoDecl (_5,_6,_7,0);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDecl ::= OptStatic UndecoratedType IdListWOptInit T_SEMI 
            {
              Object RESULT = null;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap _3 = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          
                         ((MyParser) parser).DoVarDecl (_3, _1, _4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ExternDecl ::= T_EXTERN Type IdList T_SEMI 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                         ((MyParser) parser).DoExternDecl (_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(7/*ExternDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalDecl ::= FuncDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GlobalDecl ::= FuncDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GlobalDecl ::= TypedefDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GlobalDecl ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalDecl ::= VarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDecl ::= ExternDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDecls ::= GlobalDecls GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalDecls ::= GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OptGlobalDecls ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OptGlobalDecls ::= GlobalDecls 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= NT$0 OptGlobalDecls 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                         ((MyParser) parser).DoProgramEnd();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT = null;

                         ((MyParser) parser).DoProgramStart(); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(74/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

